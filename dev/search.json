[{"path":[]},{"path":"https://gargle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://gargle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://gargle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://gargle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://gargle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://gargle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://gargle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://gargle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://gargle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://gargle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://gargle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://gargle.r-lib.org/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to gargle","title":"Contributing to gargle","text":"outlines propose change gargle. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://gargle.r-lib.org/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to gargle","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://gargle.r-lib.org/dev/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Contributing to gargle","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://gargle.r-lib.org/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to gargle","text":"recommend create Git branch pull request (PR). Look status R-CMD-check GitHub Actions workflows making changes. New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://gargle.r-lib.org/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to gargle","text":"Please note gargle project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://gargle.r-lib.org/dev/CONTRIBUTING.html","id":"see-tidyverse-development-contributing-guide","dir":"","previous_headings":"","what":"See tidyverse development contributing guide","title":"Contributing to gargle","text":"details.","code":""},{"path":"https://gargle.r-lib.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 gargle authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gargle.r-lib.org/dev/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with gargle","title":"Getting help with gargle","text":"Thanks using gargle. filing issue, places explore pieces put together make process smooth possible. Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site. Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed. right place, need file issue, please review “File issues” paragraph tidyverse contributing guidelines. Thanks help!","code":""},{"path":"https://gargle.r-lib.org/dev/articles/auth-from-web.html","id":"consider-using-a-service-account-token-or-no-token","dir":"Articles","previous_headings":"","what":"Consider using a service account token (or no token!)","title":"Auth when using R from the browser","text":"concerns using OOB auth, consider whether task truly requires auth specific, normal user. Can task completed auth, .e. accessing something world readable readable “anyone link”? case, wrapper package probably provides function go de-authorized state, googledrive::drive_deauth() googlesheets4::gs4_deauth(). task requires auth, consider whether really must specific user. may able accomplish task service account, create specific purpose. service account token much easier work server non-interactive contexts user token. service account can also given much selective permissions user account can easily deleted, longer needed. Remember service account need explicitly given permission access necessary resources (e.g. permission read write specific Drive file Sheet). service account doesn’t somehow inherit permissions indirectly user owns GCP project lives. learn using service account, see vignette(\"non-interactive-auth\").","code":""},{"path":"https://gargle.r-lib.org/dev/articles/auth-from-web.html","id":"when-and-how-to-use-oob","dir":"Articles","previous_headings":"","what":"When and how to use OOB","title":"Auth when using R from the browser","text":"absence user instructions, function gargle::gargle_oob_default() used decide whether use OOB auth. default, OOB auth used RStudio Server, Posit Cloud, Posit Workbench, Google Colaboratory, option \"gargle_oob_default\" set TRUE. (Note use term “OOB auth” include existing, conventional form OOB gargle’s new pseudo-OOB.) Wrapper packages generally also allow user opt-OOB auth making direct call auth function. example, functions googledrive::drive_auth(), googlesheets4::gs4_auth(), bigrquery::bq_auth(), gmailr::gm_auth() use_oob argument. Notably, use_oob arguments default gargle::gargle_oob_default(). gargle usually automatically detects use OOB auth, look like using OOB, . auth, redirected localhost port 1410 receive error along lines: happens might need explicitly request OOB. review two different methods.","code":"Chrome: This site can't be reached; localhost refused to connect. Firefox: Unable to connect; can't establish a connection."},{"path":"https://gargle.r-lib.org/dev/articles/auth-from-web.html","id":"request-oob-auth-in-the-pkg_auth-call","dir":"Articles","previous_headings":"","what":"Request OOB auth in the PKG_auth() call","title":"Auth when using R from the browser","text":"Packages like googledrive bigrquery aim make auth “just work” users, .e. ’s automatically triggered upon first need. However, always possible initiate auth , gives opportunity specify non-default values certain parameters. ’s request OOB auth, using googledrive example:","code":"library(googledrive)  drive_auth(use_oob = TRUE)  # now carry on with your work drive_find(n_max = 5)"},{"path":"https://gargle.r-lib.org/dev/articles/auth-from-web.html","id":"set-the-gargle_oob_default-option","dir":"Articles","previous_headings":"","what":"Set the \"gargle_oob_default\" option","title":"Auth when using R from the browser","text":"know always want use OOB, user within project, best way express set \"gargle_oob_default\" option. code appear top script, setup chunk .Rmd, Shiny app. probably makes even sense .Rprofile startup file, user project level. \"gargle_oob_default\" option set, honored downstream calls PKG_auth(), explicit implicit, default value use_oob gargle::gargle_oob_default(), consults option.","code":"options(gargle_oob_default = TRUE)"},{"path":"https://gargle.r-lib.org/dev/articles/auth-from-web.html","id":"conventional-vs--pseudo-oob-auth","dir":"Articles","previous_headings":"","what":"Conventional vs. pseudo-OOB auth","title":"Auth when using R from the browser","text":"gargle now supports two OOB flows, call “conventional OOB” (existing, legacy OOB flow) “pseudo-OOB” (new flow introduced response partial deprecation conventional OOB). using OOB auth, decision conventional pseudo-OOB made based currently configured OAuth client. OAuth client type \"installed\" (shows “Desktop” Google Cloud Console) unknown type, gargle uses conventional OOB. Note necessarily succeed, due deprecation process described . OAuth client type \"web\" (shows “Web application” Google Cloud Console), gargle uses new pseudo-OOB flow. Packages use built-tidyverse OAuth client (googledrive, googlesheets4, bigrquery) automatically select “web” client RStudio Server, Posit Cloud, Posit Workbench, Google Colaboratory “installed” client otherwise. need explicitly request “web” client setting, can use global option \"gargle_oauth_client_type\": Users configure OAuth client need intentional choosing client type, depending code running. R side, recommended setup OAuth client using gargle_oauth_client_from_json(), allows client type (\"installed\" vs. \"web\") detected programmatically downloaded JSON. less-preferred approach use gargle_oauth_client() provide information .","code":"options(gargle_oauth_client_type = \"web\")"},{"path":"https://gargle.r-lib.org/dev/articles/auth-from-web.html","id":"how-pseudo-oob-works","dir":"Articles","previous_headings":"","what":"How pseudo-OOB works","title":"Auth when using R from the browser","text":"Pseudo-OOB works just like non-OOB conventional OOB terms user’s interactions Google authorization server. user authenticates Google consents type access requested R code. flows differ handle successful response authorization server. Specifically, flows use different redirect URIs. (temporary) local webserver used listen response , e.g., http://localhost:1410/ R running locally httpuv package available (.e. non-OOB flow). conventional OOB, special redirect value used, typically urn:ietf:wg:oauth:2.0:oob, authorization code provided user via browser window manual copy/paste. page served Google. Google deprecated conventional OOB projects production mode (still allowed projects testing mode). gargle’s pseudo-OOB, redirect URI configured OAuth client used receive response. page responsible exposing code user can copy/paste, similar conventional OOB (except page served Google). Unlike conventional OOB, authorization code , something code can extracted, along state token mitigate cross-site request forgery. actually implemented using OAuth flow web server applications. Note (gargle) call pseudo-OOB, technically OOB Google’s point--view. built-OAuth client used pseudo-OOB tidyverse packages redirects https://www.tidyverse.org/google-callback/. static landing page collect data exists solely give interactive R user way convey authorization token back waiting R process thereby complete auth process.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/auth-from-web.html","id":"more-details-about-the-deprecation-of-conventional-oob","dir":"Articles","previous_headings":"How pseudo-OOB works","what":"More details about the deprecation of conventional OOB","title":"Auth when using R from the browser","text":"Key links: Blog post: Making Google OAuth interactions safer using secure OAuth flows --Band (OOB) flow Migration Guide Using OAuth 2.0 Access Google APIs","code":""},{"path":"https://gargle.r-lib.org/dev/articles/auth-from-web.html","id":"but-i-didnt-need-oob-yesterday","dir":"Articles","previous_headings":"","what":"But I didn’t need OOB yesterday!","title":"Auth when using R from the browser","text":"Sometimes usual OAuth web flow suddenly stops working people working directly R (via browser) use OOB auth get unstuck . ’s going case? initial error looks something like : ’s characteristic process sitting port 1410, gargle trying use auth. ’s true using OOB auth workaround. OOB auth , frankly, clunky, use don’t ? ways fix . Restart system. almost certainly kill offending process, usually zombie process. Hunt offending process, verify looks expendable, kill . *nix-y systems, use lsof get process ID: output look something like : case, typical, zombie R process feel confident killing . process ID listed PID. Note kill process, like , filling PID found: , clear, example, command : normal, non-OOB auth web flow work now.","code":"createTcpServer: address already in use Error in httpuv::startServer(use$host, use$port, list(call = listen)) :   Failed to create server sudo lsof -i :1410 COMMAND   PID  USER   FD   TYPE            DEVICE SIZE/OFF NODE NAME R       16664 jenny   20u  IPv4 0x63761a50856c65f      0t0  TCP localhost:hiq (LISTEN) kill -9 <PID> kill -9 16664"},{"path":"https://gargle.r-lib.org/dev/articles/auth-from-web.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Auth when using R from the browser","text":"’re working data product deployed (example shinyapps.io Posit Connect), also need consider deployed content authenticate non-interactively, covered vignette(\"non-interactive-auth\").","code":""},{"path":"https://gargle.r-lib.org/dev/articles/gargle-auth-in-client-package.html","id":"key-choices","dir":"Articles","previous_headings":"","what":"Key choices","title":"How to use gargle for auth in a client package","text":"Getting token requires several pieces information stark differences much users (need ) know control process. Let’s review , eye towards identifying responsibilities package author versus user. Overall config: OAuth client API key. provides? Token-level properties: Google identity (email) scopes. Request-level: manages tokens injects requests?","code":""},{"path":"https://gargle.r-lib.org/dev/articles/gargle-auth-in-client-package.html","id":"user-facing-auth","dir":"Articles","previous_headings":"Key choices","what":"User-facing auth","title":"How to use gargle for auth in a client package","text":"googledrive, main user-facing auth function googledrive::drive_auth(). definition (least approximately, remember static code): drive_auth() called automatically upon first need token can lead user interaction, necessarily . drive_auth() can called explicitly user, usually necessary. token_fetch() described vignette(\"-gargle-gets-tokens\"). internal .auth object maintains googledrive’s auth state explained next.","code":"# googledrive:: drive_auth <- function(email = gargle::gargle_oauth_email(),                        path = NULL,                        scopes = \"https://www.googleapis.com/auth/drive\",                        cache = gargle::gargle_oauth_cache(),                        use_oob = gargle::gargle_oob_default(),                        token = NULL) {   # this catches a common error, where the user passes JSON for an OAuth client   # to the `path` argument, which only expects a service account token   gargle::check_is_service_account(path, hint = \"drive_auth_configure\")    cred <- gargle::token_fetch(     scopes = scopes,     client = drive_oauth_client() %||% <BUILT_IN_DEFAULT_CLIENT>,     email = email,     path = path,     package = \"googledrive\",     cache = cache,     use_oob = use_oob,     token = token   )   if (!inherits(cred, \"Token2.0\")) {     # throw an informative error here   }   .auth$set_cred(cred)   .auth$set_auth_active(TRUE)    invisible() }"},{"path":"https://gargle.r-lib.org/dev/articles/gargle-auth-in-client-package.html","id":"auth-state","dir":"Articles","previous_headings":"Key choices","what":"Auth state","title":"How to use gargle for auth in a client package","text":"client package can use internal object class gargle::AuthState hold auth state. googledrive, main auth file defines placeholder .auth object: actual initialization happens .onLoad(): initialization .auth done way ensure get instance AuthState class using current, installed version gargle (vs. ambient version whenever gargle built, perhaps CRAN). AuthState instance fields , googledrive example, set point. OAuth client api_key configurable user , NULL, downstream functions can fall back internal credentials. cred field populated first call drive_auth() (direct indirectly via drive_token()).","code":".auth <- NULL .onLoad <- function(libname, pkgname) {   utils::assignInMyNamespace(     \".auth\",     gargle::init_AuthState(package = \"googledrive\", auth_active = TRUE)   )      # other stuff }"},{"path":"https://gargle.r-lib.org/dev/articles/gargle-auth-in-client-package.html","id":"oauth-client","dir":"Articles","previous_headings":"Key choices","what":"OAuth client","title":"How to use gargle for auth in a client package","text":"users present OAuth user credentials Google APIs. However, users love spared fiddly details surrounding . OAuth client one example. (Historically, following lead httr package, used term OAuth app, now use term OAuth client.) client component users even know content use client work wrapper package: possibly, client built package. field .auth auth state hold OAuth client. Exported auth helpers, drive_oauth_client() drive_auth_configure(), retrieve modify current client support users want (must) take level control. “borrow” OAuth client ID secret gargle package; always use credentials associated package provided user. Per Google User Data Policy https://developers.google.com/terms/api-services-user-data-policy, application must accurately represent authenticating Google API services. APIs scopes considered sensitive essentially impossible package provide built-OAuth client. Users must get configure client. Among packages mentioned examples, true gmailr.","code":"library(googledrive)  # first: download the OAuth client as a JSON file drive_auth_configure(   path = \"/path/to/the/JSON/that/was/downloaded/from/gcp/console.json\" )  drive_oauth_client() #> <gargle_oauth_client> #> name: acme-corp-google-client #> id: 123456789.apps.googleusercontent.com #> secret: <REDACTED> #> type: installed #> redirect_uris: http://localhost"},{"path":"https://gargle.r-lib.org/dev/articles/gargle-auth-in-client-package.html","id":"api-key","dir":"Articles","previous_headings":"Key choices","what":"API key","title":"How to use gargle for auth in a client package","text":"Google APIs can used unauthenticated state, requests include API key. example, great way read Google Sheet world-readable readable “anyone link” Shiny app, thereby designing away need manage user credentials server. user can provide API key via drive_auth_configure(api_key =) retrieve value drive_api_key(), just OAuth client. API key stored api_key field .auth auth state. Many users aren’t motivated take level control appreciate package provides built-default API key. client, packages obtain API key borrow gargle tidyverse key. APIs usable without token, case wrapper package may even expose functionality managing API key. Among packages mentioned examples, true bigrquery.","code":"library(googledrive)  drive_auth_configure(api_key = \"123456789\")  drive_api_key() #> \"123456789\""},{"path":"https://gargle.r-lib.org/dev/articles/gargle-auth-in-client-package.html","id":"email-or-google-identity","dir":"Articles","previous_headings":"Key choices","what":"Email or Google identity","title":"How to use gargle for auth in a client package","text":"contrast OAuth client API key, every user must express identity wish present API. familiar concept users expect specify . Since users may one Google account, ’s quite likely want switch accounts, even within single R session, might want explicitly declare identity used specific script app. explains drive_auth() optional email argument lets users proactively specify identity. drive_auth() usually called indirectly upon first need, user can also call proactively order specify target email: email given, gargle also checks option named \"gargle_oauth_email\". email used look tokens cache , suitable token found, used pre-configure OAuth chooser browser. Read help gargle::gargle_oauth_email().","code":"# googledrive:: drive_auth(email = \"janedoe_work@gmail.com\")"},{"path":"https://gargle.r-lib.org/dev/articles/gargle-auth-in-client-package.html","id":"scopes","dir":"Articles","previous_headings":"Key choices","what":"Scopes","title":"How to use gargle for auth in a client package","text":"users concept scopes. just know want work , e.g., Google Drive Google Sheets. client package can usually pick sensible default scopes, support users want . ’s reminder signature googledrive::drive_auth(): googledrive ships default scope, motivated user call drive_auth() preemptively start session request different scopes. example, intend read data want guard inadvertent file modification, might opt drive.readonly scope.","code":"# googledrive:: drive_auth <- function(email = gargle::gargle_oauth_email(),                        path = NULL,                        scopes = \"https://www.googleapis.com/auth/drive\",                        cache = gargle::gargle_oauth_cache(),                        use_oob = gargle::gargle_oob_default(),                        token = NULL) { ... } # googledrive:: drive_auth(scopes = \"https://www.googleapis.com/auth/drive.readonly\")"},{"path":"https://gargle.r-lib.org/dev/articles/gargle-auth-in-client-package.html","id":"oauth-cache-and-out-of-band-auth","dir":"Articles","previous_headings":"Key choices","what":"OAuth cache and Out-of-band auth","title":"How to use gargle for auth in a client package","text":"location token cache whether prefer --band auth two aspects OAuth users content go along sensible default behavior. want exert control, can done direct calls drive_auth() configuring option. Read help gargle::gargle_oauth_cache() gargle::gargle_oob_default() vignette(\"auth--web\") .","code":""},{"path":"https://gargle.r-lib.org/dev/articles/gargle-auth-in-client-package.html","id":"overview-of-mechanics","dir":"Articles","previous_headings":"","what":"Overview of mechanics","title":"How to use gargle for auth in a client package","text":"’s concrete outline one set client package get auth functionality gargle. Add gargle package’s Imports. Create file R/YOURPKG_auth.R. Create internal gargle::AuthClass object hold auth state. Follow googledrive example . Define standard functions auth interface gargle package; R/YOURPKG_auth.R. Examples: tidyverse/googledrive/R/drive_auth.R r-dbi/bigrquery/R/bq_auth.R. Use gargle’s roxygen helpers create docs auth functions. relieves writing docs inherit standard wording. See previously cited examples inspiration. Use functions YOURPKG_token() YOURPKG_api_key() (defined standard auth interface) insert token API key package’s requests.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/gargle-auth-in-client-package.html","id":"getting-that-first-token","dir":"Articles","previous_headings":"","what":"Getting that first token","title":"How to use gargle for auth in a client package","text":"focus early use, naive user, OAuth flow. user first calls high-level googledrive function drive_find(), Drive request ultimately generated call googledrive::request_generate(). definition, least approximately: googledrive::request_generate() thin wrapper around gargle::request_develop() gargle::request_build() implements details specific googledrive, delegating general functions gargle. vignette(\"request-helper-functions\") documents gargle functions. googledrive::request_generate() gets token drive_token(), defined like : drive_has_token() helper defined : default, auth active, , fresh start, won’t token stashed .auth yet. result call drive_auth() obtain credential, cached .auth$cred remainder session. subsequent calls drive_token() just spit back token. , discussed scenarios advanced user might call drive_auth() proactively, non-default arguments, possibly even loading service token using alternative flows, like external account. token loaded way stashed .auth$cred returned subsequent calls drive_token(). Multiple gargle-using packages can use shared token obtaining suitably scoped token one package, registering token packages. example, default scope requested googledrive also sufficient operations available googlesheets4. use shared token like : important make sure token-requesting package (googledrive, ) using OAuth client necessary APIs scopes enabled.","code":"# googledrive:: request_generate <- function(endpoint = character(),                              params = list(),                              key = NULL,                              token = drive_token()) {   ept <- drive_endpoint(endpoint)   if (is.null(ept)) {     # throw error about unrecognized endpoint   }    ## modifications specific to googledrive package   params$key <- key %||% params$key %||%     drive_api_key() %||% <BUILT_IN_DEFAULT_API_KEY>   if (!is.null(ept$parameters$supportsAllDrives)) {     params$supportsAllDrives <- TRUE   }    req <- gargle::request_develop(endpoint = ept, params = params)   gargle::request_build(     path = req$path,     method = req$method,     params = req$params,     body = req$body,     token = token   ) } # googledrive:: drive_token <- function() {   if (isFALSE(.auth$auth_active)) {     return(NULL)   }   if (!drive_has_token()) {     drive_auth()   }   httr::config(token = .auth$cred) } # googledrive:: drive_has_token <- function() {   inherits(.auth$cred, \"Token2.0\") } library(googledrive) library(googlesheets4)  drive_auth(email = \"jane_doe@example.com\") # gets a suitably scoped token                                            # and stashes for googledrive use  gs4_auth(token = drive_token())            # registers token with googlesheets4  # now work with both packages freely ..."},{"path":"https://gargle.r-lib.org/dev/articles/gargle-auth-in-client-package.html","id":"auth-interface","dir":"Articles","previous_headings":"","what":"Auth interface","title":"How to use gargle for auth in a client package","text":"exported functions like drive_auth(), drive_token(), etc. constitute auth interface googledrive gargle centralized tidyverse/googledrive/R/drive_auth.R. good template use gargle manage auth client package. addition, docs gargle-backed functions generated automatically standard information maintained gargle package. drive_token() retrieves current credential, form ready inclusion HTTP requests. auth_active TRUE cred NULL, drive_auth() called obtain credential. auth_active FALSE, NULL returned; client packages designed fall back including API key affected HTTP requests, sensible API. drive_auth() ensures dealing authenticated user credential hand place authorized requests. Sets auth_active TRUE. Can called directly, drive_token() also call needed. drive_deauth() clears current token. might also toggle auth_active, depending features target API. See . drive_oauth_client() returns .auth$client. drive_api_key() returns .auth$api_key. drive_auth_configure() can used configure auth. advanced user enter OAuth client API key auth config, order affect subsequent requests. drive_user() reports information user associated current token. Drive API offers actual endpoint , true Google APIs. Therefore analogous function bigrquery, bq_user() better general reference.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/gargle-auth-in-client-package.html","id":"de-auth","dir":"Articles","previous_headings":"","what":"De-auth","title":"How to use gargle for auth in a client package","text":"APIs split two classes: can used, least partially, without token . API usable without token – true Drive API – requests must include API key. Therefore, auth design client package different two types APIs. API can used without token: drive_deauth() can used time enter de-authorized state. sets auth_active FALSE .auth$cred NULL. state, requests sent API key token. great way eliminate friction re: auth ’s need , .e. requests resources world readable available anyone knows ask , files shared via “Anyone link”. de-authorized state especially useful non-interactive settings user interaction indirect, via Shiny. API used without token: BigQuery example API. bq_deauth() just clears current token, auth flow starts next time token needed.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/gargle-auth-in-client-package.html","id":"bring-your-own-client-and-key","dir":"Articles","previous_headings":"","what":"Bring Your Own Client and Key","title":"How to use gargle for auth in a client package","text":"Advanced users can use OAuth client API key. drive_auth_configure() lives R/drive_auth.R provides ability modify current client api_key. Recall drive_oauth_client() drive_api_key() also exist targeted, read-access. vignette(\"get-api-credentials\") describes get API key OAuth client. Packages always send token omit API key functionality .","code":""},{"path":"https://gargle.r-lib.org/dev/articles/gargle-auth-in-client-package.html","id":"changing-identities-and-more","dir":"Articles","previous_headings":"","what":"Changing identities (and more)","title":"How to use gargle for auth in a client package","text":"One reason user call drive_auth() directly proactively switch one Google identity another make sure presenting specific identity. drive_auth() accepts email argument, honored gargle determines already suitable token hand. sketch user switch identities session, possibly non-interactive:","code":"library(googledrive)  drive_auth(email = \"janedoe_work@gmail.com\") # do stuff with Google Drive here, with Jane Doe's \"work\" account  drive_auth(email = \"janedoe_personal@gmail.com\") # do other stuff with Google Drive here, with Jane Doe's \"personal\" account  drive_auth(path = \"/path/to/a/service-account.json\") # do other stuff with Google Drive here, using a service account"},{"path":"https://gargle.r-lib.org/dev/articles/get-api-credentials.html","id":"get-a-google-cloud-platform-project","dir":"Articles","previous_headings":"","what":"Get a Google Cloud Platform project","title":"How to get your own API credentials","text":"need Google Cloud Platform (GCP) project hold credentials. Go Google Cloud Platform Console: https://console.cloud.google.com may involve logging selecting preferred Google identity. may involve selecting relevant organization. console general destination inspecting modifying GCP projects. Create new project , necessary. Otherwise, select project interest, one.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/get-api-credentials.html","id":"enable-apis","dir":"Articles","previous_headings":"","what":"Enable API(s)","title":"How to get your own API credentials","text":"Enable relevant APIs(s) GCP project. left sidebar, navigate APIs & Services > Library. Identify API interest. Click Enable. get wrong, .e. need enable APIs later, can always come back .","code":""},{"path":"https://gargle.r-lib.org/dev/articles/get-api-credentials.html","id":"think-about-billing","dir":"Articles","previous_headings":"","what":"Think about billing","title":"How to get your own API credentials","text":"APIs, won’t able anything interesting credentials hosted project unless also linked billing account. true, example, BigQuery anything Maps. true, example, Drive Sheets Gmail. target API requires billing account, obviously raises stakes manage API keys, OAuth clients, service account tokens. Plan accordingly. ’re new Google Cloud Platform, ’ll get enjoy GCP Free Tier. time writing, means get $300 credit additional billing happen without express consent. low-stress way experiment APIs, billing account enabled, without putting actual money line.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/get-api-credentials.html","id":"api-key","dir":"Articles","previous_headings":"","what":"API Key","title":"How to get your own API credentials","text":"APIs accept requests read public resources, case request can sent API key lieu token. possible, ’s good idea expose workflow wrapper package, users can decide go “de-authed” mode. using package non-interactive indirect fashion (e.g. scheduled job remote server via Shiny), wonderful manage token, work can done API key instead. APIs aren’t really usable without token, case API key may relevant can ignore section. GCP Console, target GCP Project, go APIs & Services > Credentials. Create credentials > API key. can capture new API key via clipboard right away close pop-copy later Credentials page. case, suggest take opportunity edit API key Credentials page give nickname. Package maintainers might want build API key fallback, possibly taking measures obfuscate key limit use package.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/get-api-credentials.html","id":"what-does-a-user-do-with-an-api-key","dir":"Articles","previous_headings":"API Key","what":"What does a user do with an API key?","title":"How to get your own API credentials","text":"Package users register API key use wrapper package. example, googlesheets4, one use googlesheets4::gs4_auth_configure() store key use downstream requests, .e. call googlesheets4::gs4_deauth():","code":"library(googlesheets4)  gs4_auth_configure(api_key = \"YOUR_API_KEY_GOES_HERE\") gs4_deauth()  # now you can read public resources, such as official example Sheets, # without any need for auth gs4_example(\"gapminder\") |>   read_sheet()"},{"path":"https://gargle.r-lib.org/dev/articles/get-api-credentials.html","id":"oauth-client-id-and-secret","dir":"Articles","previous_headings":"","what":"OAuth client ID and secret","title":"How to get your own API credentials","text":"APIs used create modify resources behalf user requests must include user’s token. regular user generally need send OAuth2 token, obtained auspices OAuth “app” “client”. called three-legged OAuth, 3 legs client, user, Google. basic steps described Prerequisites section Google OAuth 2.0 Mobile & Desktop Apps: GCP Console, target GCP Project, go APIs & Services > Credentials. Create credentials > OAuth client ID. Select Application type, either “Desktop app” (common type used gargle) “Web application” (useful pseudo-OOB flow). can capture client ID secret via clipboard point , recommend, download full information JSON. recommend using JSON, conveys client type (desktop vs. web) redirect URIs (important web type). time, can navigate particular client ID click “Download JSON”. Two ways package info use gargle: Provide path downloaded JSON file. Use gargle::gargle_oauth_client(). cases, suggest devise nickname OAuth credential use credential’s name GCP Console name argument gargle::gargle_oauth_client_from_json() gargle::gargle_oauth_client(). Package maintainers might want build client fallback, possibly taking measures obfuscate client ID secret limit use package. Note three-legged OAuth always requires involvement user, word “secret” can somewhat confusing. secret sense password token. probably still want store opaque way, someone else easily “borrow” present OAuth consent screen impersonates package.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/get-api-credentials.html","id":"what-does-a-user-do-with-an-oauth-client","dir":"Articles","previous_headings":"OAuth client ID and secret","what":"What does a user do with an OAuth client?","title":"How to get your own API credentials","text":"Package users register client use wrapper package. example, googledrive, one use googledrive::drive_auth_configure() :","code":"library(googledrive)  google_client <- gargle::gargle_oauth_client_from_json(   path = \"/path/to/the/JSON/that/was/downloaded/from/gcp/console.json\",   name = \"acme-corp-google-client\" ) drive_auth_configure(app = google_client)  # now any new OAuth tokens are obtained with the configured client"},{"path":"https://gargle.r-lib.org/dev/articles/get-api-credentials.html","id":"service-account-token","dir":"Articles","previous_headings":"","what":"Service account token","title":"How to get your own API credentials","text":"long time, recommended way make authorized requests API non-interactive context use service account token. April 2021, alternative exists – workload identity federation – available applications running specific non-Google Cloud platforms, AWS. can use workload identity federation, probably (see next section). can’t, outline use conventional service account. official overview service accounts given official documentation Google. note ’s necessary understand order use service account token. GCP Console, target GCP Project, go IAM & Admin > Service accounts. example, service account used create googledrive docs name “googledrive-docs” description “Used generating googledrive documentation”. example, service account used create googledrive docs explicit roles. service account used test bigrquery roles BigQuery Admin Storage Admin. Grant users access service account? far, done , feel free nothing . know useful , means . Create key download JSON. file mean talk “service account token” documentation gargle packages use gargle. gargle::credentials_service_account() expects path file. Appreciate JSON file holds sensitive information. Treat like username & password combo! file holds credentials potentially lot power don’t expire. Consider storing file way automatically discovered Application Default Credentials search strategy. See credentials_app_default() details. notice downloaded JSON file awful name, sometimes create symlink uses service account’s name, make easier tell file . Remember grant service account necessary permissions resources plan access, e.g., read write permission specific Google Sheet. service account formal relationship Google user won’t automatically inherit permissions. Authors wrapper packages can use symmetric encryption strategy described Managing tokens securely use token remote servers, continuous integration services like GitHub Actions.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/get-api-credentials.html","id":"what-does-a-user-do-with-a-service-account-token","dir":"Articles","previous_headings":"Service account token","what":"What does a user do with a service account token?","title":"How to get your own API credentials","text":"provide token’s filepath wrapper package’s main auth function, e.g.: Alternatively, put token somewhere (store location environment variable) auto-discovered Application Default Credentials search strategy.","code":"# googledrive drive_auth(path = \"/path/to/your/service-account-token.json\")"},{"path":"https://gargle.r-lib.org/dev/articles/get-api-credentials.html","id":"workload-identity-federation","dir":"Articles","previous_headings":"","what":"Workload identity federation","title":"How to get your own API credentials","text":"Workload identity federation new (April 2021) keyless authentication mechanism allows applications running non-Google Cloud platform, AWS, access Google Cloud resources without using conventional service account token. eliminates dilemma safely manage service account credential files. Unlike service accounts, configuration file workload identity federation contains secrets. Instead, holds non-sensitive metadata. external application obtains needed sensitive data “--fly” running instance. combined data used token exchange ultimately yields short-lived GCP access token. access token allows external application impersonate service account inherit permissions service account access GCP resources. ’s love? Well, first, auth flow available code running AWS, Azure, another platform supports OpenID Connect protocol. Second, ’s non-trivial amount pre-configuration necessary ends. done, can download configuration file makes auth work automagically gargle. feature still experimental gargle currently supports AWS. , see documentation credentials_external_account(). Like conventional service account tokens, workload identity federation great fit Application Default Credentials strategy discovering credentials. See credentials_app_default() . two links provide, respectively, high-level overview step--step instructions flow: Blog post: Keyless API authentication — Better cloud security workload identity federation, service account keys necessary Documentation: Configuring workload identity federation","code":""},{"path":"https://gargle.r-lib.org/dev/articles/get-api-credentials.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"How to get your own API credentials","text":"Learn Google’s documentation: Credentials, access, security, identity: https://support.google.com/googleapi/answer/6158857?hl=en&ref_topic=7013279 Using OAuth 2.0 Installed Applications","code":""},{"path":"https://gargle.r-lib.org/dev/articles/google-compute-engine.html","id":"preparation","dir":"Articles","previous_headings":"","what":"Preparation","title":"Google Compute Engine","text":"use googleComputeEngineR package work GCE VMs. done required setup package: Identify (get) Google Cloud Platform (GCP) project, billing enabled. Download JSON default service account said GCP project. Configure env vars .Renviron: done setup, attaching package looks: Note (think) scopes mentioned googleComputeEngineR’s activities. don’t think direct connection instance scopes VMs created googleComputeEngineR. (Although, course, \"https://www.googleapis.com/auth/cloud-platform\" default, recommended scope contexts.) can see current instances gce_list_instances(): reflects things look ’ve mucking around bit several VMs currently stopped.","code":"GCE_AUTH_FILE=\"/path/to/that/json/mentioned/above.json\" GCE_DEFAULT_PROJECT_ID=\"gargle-gce\" GCE_DEFAULT_ZONE=\"us-west1-a\" library(googleComputeEngineR) #> ✔ Setting scopes to https://www.googleapis.com/auth/cloud-platform #> ✔ Successfully auto-authenticated via /path/to/that/json/mentioned/above.json #> Set default project ID to 'gargle-gce' #> Set default zone to 'us-west1-a' gce_list_instances() #> ==Google Compute Engine Instance List== #>                        name   machineType     status       zone     externalIP   creationTimestamp #> 1 gargle-gce-rstudio-server e2-standard-4 TERMINATED us-west1-a No external IP 2022-10-21 14:41:46 #> 2           majestic-cuckoo e2-standard-4 TERMINATED us-west1-a No external IP 2023-04-11 18:56:14 #> 3            piggish-salmon e2-standard-4 TERMINATED us-west1-a No external IP 2023-04-12 07:22:26 #> 4                tricky-fox e2-standard-4 TERMINATED us-west1-a No external IP 2023-04-12 12:00:52"},{"path":"https://gargle.r-lib.org/dev/articles/google-compute-engine.html","id":"creating-a-vm-on-gce","dir":"Articles","previous_headings":"","what":"Creating a VM on GCE","title":"Google Compute Engine","text":"’s basic way creating VM: can longer remember settled predefined_type = \"e2-standard-4\". ’s ’ll see: can log RStudio Server given {IP_ADDRESS}. Helpful snippets getting clipboard: hood, googleComputeEngineR inserting default choices associated service account scopes. ’s actually done: create another VM pass serviceAccounts explicitly, can also specify scopes. learn : https://cloud.google.com/compute/docs/access/create-enable-service-accounts--instances.","code":"vm <- gce_vm(   template = \"rstudio\",   name = \"cerebral-lion\",   username = \"jenny\",   password = \"jenny1234\",   predefined_type = \"e2-standard-4\" ) #> ── ## VM Template: ' rstudio' running at http://{IP_ADDRESS} ───────────────────────────────────────────────────── #> ℹ 2023-04-13 12:03:05 > On first boot, wait a few minutes for docker container to install before logging in. #> ==Google Compute Engine Instance== #>  #> Name:                cerebral-lion #> Created:             2023-04-13 12:02:44 #> Machine Type:        e2-standard-4 #> Status:              RUNNING #> Zone:                us-west1-a #> External IP:         {IP_ADDRESS} #> Disks:  #>                deviceName       type       mode boot autoDelete #> 1 cerebral-lion-boot-disk PERSISTENT READ_WRITE TRUE       TRUE #>  #> Metadata:   #>                      key            value #> 2               template          rstudio #> 3 google-logging-enabled             true #> 4           rstudio_user            jenny #> 5             rstudio_pw        jenny1234 #> 6      gcer_docker_image rocker/tidyverse # if you, e.g., just created `vm` paste0(\"http://\", gce_get_external_ip(vm)) |>   clipr::write_clip()  # if you want to refer to the instance by name paste0(\"http://\", gce_get_external_ip(\"cerebral-lion\")) |>   clipr::write_clip() gce_vm(   ...,   serviceAccounts = list(     email = \"{EMAIL_OF_THE_DEFAULT_SERVICE_ACCOUNT}\",     scopes = \"https://www.googleapis.com/auth/cloud-platform\"   ) )"},{"path":"https://gargle.r-lib.org/dev/articles/google-compute-engine.html","id":"do-some-work-in-the-vm","dir":"Articles","previous_headings":"","what":"Do some work in the VM","title":"Google Compute Engine","text":"Log RStudio Server VM (see getting IP address). First, current exploration, want install gargle specific branch: Now attach gargle set verbosity level \"debug\". Let’s look service accounts available running instance: can enable multiple virtual machine instances use service account, virtual machine instance can one service account identity. ever 1 actual service account identify, might see two rows , , default service account can referred 2 names: email default. Let’s get token token_fetch() inspect . default, credentials_gce() uses default service account \"cloud-platform\" scope. want something Google Drive API request scope? get token, still \"cloud-platform\" scope, Drive scope specified VM created: can use access token scopes specified created instance. example, instance granted https://www.googleapis.com/auth/storage-full scope Cloud Storage, can’t use access token make request BigQuery. , indeed, lack explicit Drive scope means , e.g., googledrive package can’t operations require auth:","code":"install.packages(\"pak\") pak::pak(\"r-lib/gargle@gce-improvements\") library(gargle) local_gargle_verbosity(\"debug\") gce_instance_service_accounts() #>                                     name                                  email aliases #> 1 {EMAIL_OF_THE_DEFAULT_SERVICE_ACCOUNT} {EMAIL_OF_THE_DEFAULT_SERVICE_ACCOUNT} default #> 2                                default {EMAIL_OF_THE_DEFAULT_SERVICE_ACCOUNT} default #>                                           scopes #> 1 https://www.googleapis.com/auth/cloud-platform #> 2 https://www.googleapis.com/auth/cloud-platform t <- token_fetch() #> trying `token_fetch()` #> ... #> Trying `credentials_gce()` ... #> GceToken initialize #> GceToken init_credentials #> GCE service account email: '{EMAIL_OF_THE_DEFAULT_SERVICE_ACCOUNT}' #> GCE service account name: \"default\" #> GCE access token scopes: \"...cloud-platform\" t #>  #> ── <GceToken (via gargle)> ────────────────────────────────────────────────────────────────────────────────────────────────────── #>      scopes: ...cloud-platform #> credentials: access_token, expires_in, token_type t <- token_fetch(c(   \"https://www.googleapis.com/auth/cloud-platform\",   \"https://www.googleapis.com/auth/drive\" )) #> trying `token_fetch()` #> ... #> Trying `credentials_gce()` ... #> ! This requested scope is not among the scopes for the \"default\" service account: #> ✖ https://www.googleapis.com/auth/drive #> ℹ If there are problems downstream, this might be the root cause. #> GceToken initialize #> GceToken init_credentials #> ! This requested scope is not among the scopes for the access token returned by the metadata server: #> ✖ https://www.googleapis.com/auth/drive #> ℹ If there are problems downstream, this might be the root cause. #> ! Updating token scopes to reflect its actual scopes: #> • https://www.googleapis.com/auth/cloud-platform #> GCE service account email: '{EMAIL_OF_THE_DEFAULT_SERVICE_ACCOUNT}' #> GCE service account name: \"default\" #> GCE access token scopes: \"...cloud-platform\" t #>  #> ── <GceToken (via gargle)> ────────────────────────────────────────────────────────────────────────────────────────────────────── #>      scopes: ...cloud-platform #> credentials: access_token, expires_in, token_type library(googledrive) drive_find() #> attempt to access internal gargle data from: googledrive #> Error in `gargle::response_process()`: #> ! Client error: (403) Forbidden #> Request had insufficient authentication scopes. #> PERMISSION_DENIED #> • message: Insufficient Permission #> • domain: global #> • reason: insufficientPermissions #> Backtrace: #>     ▆ #>  1. └─googledrive::drive_find() #>  2.   └─googledrive::do_paginated_request(request, n_max = n_max, n = function(x) length(x$files)) #>  3.     └─gargle::response_process(page) #>  4.       └─gargle:::gargle_abort_request_failed(error_message(resp), resp) #>  5.         └─gargle:::gargle_abort(...) #>  6.           └─cli::cli_abort(...) #>  7.             └─rlang::abort(...)"},{"path":"https://gargle.r-lib.org/dev/articles/google-compute-engine.html","id":"suspend-resume-or-stop-the-vm","dir":"Articles","previous_headings":"","what":"Suspend, resume, or stop the VM","title":"Google Compute Engine","text":"’re actively working VM, least suspend . resume pick left . ensure aren’t incurring charges, stop machine, ’ll start ’ve, e.g., installed dev packages downloaded/created files. ’s good idea check ’ve done whatever intended instance. Check status :","code":"gce_vm_suspend(\"cerebral-lion\") gce_vm_resume(\"cerebral-lion\") gce_vm_stop(\"cerebral-lion\") gce_list_instances() #> ==Google Compute Engine Instance List== #>                        name   machineType     status       zone     externalIP   creationTimestamp #> 1             cerebral-lion e2-standard-4  SUSPENDED us-west1-a No external IP 2023-04-13 12:02:44 #> 2 gargle-gce-rstudio-server e2-standard-4 TERMINATED us-west1-a No external IP 2022-10-21 14:41:46 #> 3           majestic-cuckoo e2-standard-4 TERMINATED us-west1-a No external IP 2023-04-11 18:56:14 #> 4            piggish-salmon e2-standard-4 TERMINATED us-west1-a No external IP 2023-04-12 07:22:26 #> 5                tricky-fox e2-standard-4 TERMINATED us-west1-a No external IP 2023-04-12 12:00:52"},{"path":"https://gargle.r-lib.org/dev/articles/google-compute-engine.html","id":"creating-a-vm-and-specifying-scopes","dir":"Articles","previous_headings":"","what":"Creating a VM and specifying scopes","title":"Google Compute Engine","text":"Now ’re going specifically request Drive scope VM. AFAICT googleComputeEngineR helps set scopes time VM creation, ’m going create new instance. seems possible change scopes pre-existing instance long stopped, maybe feature request googleComputeEngineR (maybe ’m overlooking ’s already way ). reading: https://cloud.google.com/compute/docs/access/create-enable-service-accounts--instances#changeserviceaccountandscopes. get IP address, log RStudio Server, install desired version gargle (shown). gce_instance_service_accounts() shows , fact, managed change scopes available default service account: see actual tokens well. Note get \"drive\" scope even don’t ask . , one expect, ’s now possible work googledrive package.","code":"vm <- gce_vm(   template = \"rstudio\",   name = \"trustful-bull\",   username = \"jenny\",   password = \"jenny1234\",   predefined_type = \"e2-standard-4\",   serviceAccounts = list(     list(       email = \"{EMAIL_OF_THE_DEFAULT_SERVICE_ACCOUNT}\",       scopes = c(         \"https://www.googleapis.com/auth/cloud-platform\",         \"https://www.googleapis.com/auth/drive\"       )     )   ), ) gce_instance_service_accounts() #>                                     name                                  email aliases #> 1 {EMAIL_OF_THE_DEFAULT_SERVICE_ACCOUNT} {EMAIL_OF_THE_DEFAULT_SERVICE_ACCOUNT} default #> 2                                default {EMAIL_OF_THE_DEFAULT_SERVICE_ACCOUNT} default #>                                                                                 scopes #> 1 https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/drive #> 2 https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/drive t <- token_fetch() #> trying `token_fetch()` #> ... #> Trying `credentials_gce()` ... #> GceToken initialize #> GceToken init_credentials #> ! Updating token scopes to reflect its actual scopes: #> • https://www.googleapis.com/auth/cloud-platform #> • https://www.googleapis.com/auth/drive #> GCE service account email: '{EMAIL_OF_THE_DEFAULT_SERVICE_ACCOUNT}' #> GCE service account name: \"default\" #> GCE access token scopes: \"...cloud-platform, ...drive\" t #>  #> ── <GceToken (via gargle)> ────────────────────────────────────────────────────────────────────────────────────────────────────── #>      scopes: ...cloud-platform, ...drive #> credentials: access_token, expires_in, token_type library(googledrive) drive_find() #> # A dribble: 0 × 3 #> # ℹ 3 variables: name <chr>, id <drv_id>, drive_resource <list>  drive_user() #> Logged in as: #> • displayName: '{EMAIL_OF_THE_DEFAULT_SERVICE_ACCOUNT}' #> • emailAddress: '{EMAIL_OF_THE_DEFAULT_SERVICE_ACCOUNT}'"},{"path":"https://gargle.r-lib.org/dev/articles/how-gargle-gets-tokens.html","id":"token_fetch","dir":"Articles","previous_headings":"","what":"token_fetch()","title":"How gargle gets tokens","text":"token_fetch() rather magical function getting token. goal make auth relatively painless users, allowing developers power users take control need . users presumably interact token_fetch() indirect way, mediated API wrapper package. interface token_fetch() unfriendly – ’s flexible! objective token_fetch() allow package developers take responsibility managing user’s token, without implement different ways obtaining token first place. signature token_fetch() simple , therefore, informative: hood, token_fetch() calls sequence much specific credential functions, wrapped tryCatch() returning NULL unsuccessful. formal argument functions common scopes, rest passed via .... gives sense credential functions reflects order called: possible manipulate registry functions. help cred_funs_list() good place learn present concrete example last section vignette. now, however, assume ’re working default registry ships gargle. Note also credential functions exported can called directly.","code":"token_fetch(scopes, ...) writeLines(names(cred_funs_list())) #> credentials_byo_oauth2 #> credentials_service_account #> credentials_external_account #> credentials_app_default #> credentials_gce #> credentials_user_oauth2"},{"path":"https://gargle.r-lib.org/dev/articles/how-gargle-gets-tokens.html","id":"get-verbose-output","dir":"Articles","previous_headings":"","what":"Get verbose output","title":"How gargle gets tokens","text":"see information gargle , set \"gargle_verbosity\" option “debug”. Read docs gargle_verbosity().","code":""},{"path":"https://gargle.r-lib.org/dev/articles/how-gargle-gets-tokens.html","id":"credentials_byo_oauth2","dir":"Articles","previous_headings":"","what":"credentials_byo_oauth2()","title":"How gargle gets tokens","text":"first function tried credentials_byo_oauth2(). ’s call token_fetch() might work: credentials_byo_oauth2() provides back door “bring token” workflow. function accounts scenario OAuth token obtained external means ’s convenient able put force. credentials_byo_oauth2() checks token class httr::Token2.0 appears associated Google. token class request also acceptable, case auth_token component extracted treated input. Token2.0 object present, processed httr::config(), functions like googledrive::drive_token() bigrquery::bq_token() . token provided doesn’t satisfy requirements, fail token_fetch()’s execution moves next function registry.","code":"token_fetch(token = <TOKEN2.0>)  credentials_byo_oauth2(   token = <TOKEN2.0> )"},{"path":"https://gargle.r-lib.org/dev/articles/how-gargle-gets-tokens.html","id":"credentials_service_account","dir":"Articles","previous_headings":"","what":"credentials_service_account()","title":"How gargle gets tokens","text":"next function tried credentials_service_account(). ’s call token_fetch() service account inputs plays : scopes often provided API wrapper function mediating calls token_fetch() credential_service_account(). path argument presumably coming user. treated JSON representation service account credentials, form acceptable jsonlite::fromJSON(). example, file path, also JSON string. named path argument can’t parsed service account credential, fail token_fetch()’s execution moves next function registry. Google documentation service accounts: Cloud Identity Access Management > Understanding service accounts R users, service account great option credentials used script application running remotely unattended fashion. particular, better approach trying move OAuth2 credentials one machine another. example, service account preferred method auth testing documenting package continuous integration service. JSON key file must managed securely. particular, kept , e.g., GitHub repository (unless encrypted). encryption strategy used gargle packages described article Managing tokens securely. Note fetching token service account requires reasonably accurate system clock. particular importance users running gargle inside Docker container, Docker Windows intermittently seen problems clock drift. service account token requests fail “Bad Request” inside container, succeed locally, check container’s system clock accurate.","code":"token_fetch(scopes = <SCOPES>, path = \"/path/to/your/service-account.json\")  # credentials_byo_oauth2() fails because no `token`, # which leads to this call: credentials_service_account(   scopes = <SCOPES>,   path = \"/path/to/your/service-account.json\" )"},{"path":"https://gargle.r-lib.org/dev/articles/how-gargle-gets-tokens.html","id":"credentials_external_account","dir":"Articles","previous_headings":"","what":"credentials_external_account()","title":"How gargle gets tokens","text":"next function tried credentials_external_account(). ’s call token_fetch() external account inputs plays : credentials_external_account() implements something called workload identity federation available applications running specific non-Google Cloud platforms. time writing, gargle supports AWS, expanded providers, Azure, documented need. Similar credentials_service_account(), path treated JSON representation account’s configuration ’s probably file path. However, contrast credentials_service_account(), JSON contains non-sensitive metadata, , indeed, main point flow. secrets needed complete auth obtained “--fly” , e.g., running EC2 instance. credentials_external_account() fail many reasons: named path argument, JSON path can’t parsed configuration external AWS account, don’t appear running AWS, suggested packages AWS functionality installed, workload identity pool misconfigured. happens, fail token_fetch()’s execution moves next function registry. Google documentation workload identity federation specifics AWS: Blog post: Keyless API authentication — Better cloud security workload identity federation, service account keys necessary Documentation: Configuring workload identity federation","code":"token_fetch(scopes = <SCOPES>, path = \"/path/to/your/external-account.json\")  # credentials_byo_oauth2() fails because no `token`, # credentials_service_account() fails because the JSON provided via #   `path` is not of type \"service_account\", # which leads to this call: credentials_external_account(   scopes = <SCOPES>,   path = \"/path/to/your/external-account.json\" )"},{"path":"https://gargle.r-lib.org/dev/articles/how-gargle-gets-tokens.html","id":"credentials_app_default","dir":"Articles","previous_headings":"","what":"credentials_app_default()","title":"How gargle gets tokens","text":"next function tried credentials_app_default(). ’s call token_fetch() might work: credentials_app_default() loads credentials file identified via search strategy known Application Default Credentials (ADC). credentials conventional service account, external account, user credentials happen stored pre-ordained location format. hope make auth “just work” someone working Google-provided infrastructure used Google tooling get started, gcloud command line tool. sequence paths consulted, describe , abuse notation. ALL_CAPS represents value environment variable. search successfully identifies JSON file, parsed ingested either service account token, external account configuration, OAuth2 user credential. case OAuth2 credential, requested scopes must also meet certain criteria. Note work OAuth2 credentials initiated gargle, stored disk .rds files. storage OAuth2 user credentials JSON unique certain Google tools – possibly just gcloud CLI – probably regarded deprecated. recommended use ADC service account workload identity federation. quest unsuccessful, fail token_fetch()’s execution moves next function registry. main takeaway lesson: can make auth “just work” storing JSON service account external account one filepaths listed . automagically discovered token_fetch() called scopes argument specified. , remember JSON key file conventional service account must managed securely live directory syncs cloud. JSON configuration external account actually sensitive one benefits flow, ’s available narrow set circumstances.","code":"token_fetch(scopes = <SCOPES>)  # credentials_byo_oauth2() fails because no `token`, # credentials_service_account() fails because no `path`, # credentials_external_account() fails because no `path`, # which leads to this call: credentials_app_default(   scopes = <SCOPES> ) ${GOOGLE_APPLICATION_CREDENTIALS} ${CLOUDSDK_CONFIG}/application_default_credentials.json  # on Windows: %APPDATA%\\gcloud\\application_default_credentials.json %SystemDrive%\\gcloud\\application_default_credentials.json C:\\gcloud\\application_default_credentials.json  # on not-Windows: ~/.config/gcloud/application_default_credentials.json"},{"path":"https://gargle.r-lib.org/dev/articles/how-gargle-gets-tokens.html","id":"credentials_gce","dir":"Articles","previous_headings":"","what":"credentials_gce()","title":"How gargle gets tokens","text":"next function tried credentials_gce(). ’s call token_fetch() might work: credentials_gce() retrieves service account credentials metadata service specific virtual machine instances running Google Cloud Engine (GCE). Basically, ask , auth method . Let us move . seems happening ’s want, see last section remove auth method.","code":"token_fetch(scopes = <SCOPES>) # or perhaps token_fetch(scopes = <SCOPES>, service_account = <SERVICE_ACCOUNT>)  # credentials_byo_oauth2() fails because no `token`, # credentials_service_account() fails because no `path`, # credentials_external_account() fails because no `path`, # credentials_app_default() fails because no ADC found, # which leads to one of these calls: credentials_gce(   scopes = <SCOPES>,   service_account = \"default\" ) # or credentials_gce(   scopes = <SCOPES>,   service_account = <SERVICE_ACCOUNT> )"},{"path":"https://gargle.r-lib.org/dev/articles/how-gargle-gets-tokens.html","id":"credentials_user_oauth2","dir":"Articles","previous_headings":"","what":"credentials_user_oauth2()","title":"How gargle gets tokens","text":"next final function tried credentials_user_oauth2(). ’s call token_fetch() might work: credentials_user_oauth2() vast majority users end . function choreographs traditional “OAuth dance” browser. User credentials cached locally, user level, default. Therefore, first use, scenarios gargle can determine unequivocally already suitable token hand can load (possibly refresh) , without additional user intervention. scopes, app (likely renamed client future version gargle), package generally provided API wrapper function mediating calls token_fetch(). “borrow” OAuth client gargle package; always use credentials associated package provided user. Per Google User Data Policy https://developers.google.com/terms/api-services-user-data-policy, application must accurately represent authenticating Google API services. wrapper package presumably also declare package requesting token (used messages). ’s call token_fetch() credentials_user_oauth2() might look initiated THINGY_auth(), function fictional thingyr wrapper package: See vignette(\"gargle-auth--client-package\") design ideas function like THINGY_auth(). happens tomorrow next week? make user go browser dance ? get happy place don’t bug constantly auth? First, define “suitable”, .e. means find matching token cache. credentials_user_oauth2() thin wrapper around gargle2.0_token() constructor gargle::Gargle2.0 class used hold OAuth2 token. call might look something like (simplified communication purposes): gargle looks cache specified gargle_oauth_cache() token scopes, client, Google identity specified email. default email NA, might find one tokens necessary scopes client. case, gargle reveals email associated matching token(s) asks user explicit instructions proceed. looks something like : none tokens right scopes client (user declines use pre-existing token), head browser initiate OAuth2 flow de novo. user can reduce need interaction passing target email thingy_auth(): specifying \"gargle_oauth_email\" option. value email = TRUE, passed directly via option, alternative strategy: TRUE means gargle allowed use matching token whenever exactly one match. elevated status email gargle::Gargle2.0 tokens motivated fact many us multiple Google identities need prominent working Google APIs. one main motivations gargle::Gargle2.0, extends httr::Token2.0. gargle::Gargle2.0 class also defaults user-level token cache, opposed project-level. overview current OAuth cache available via gargle_oauth_cache() output looks something like :","code":"token_fetch(scopes = <SCOPES>)  # credentials_byo_oauth2() fails because no `token`, # credentials_service_account() fails because no `path`, # credentials_external_account() fails because no `path`, # credentials_app_default() fails because no ADC found, # credentials_gce() fails because not on GCE, # which leads to this call: credentials_user_oauth2(   scopes = <SCOPES>,   app = <OAUTH_APP>,   package = \"<PACKAGE>\" ) # user initiates auth or does something that triggers it indirectly THINGY_auth()  # which then calls gargle::token_fetch(   scopes  = <SCOPES_NEEDED_FOR_THE_THINGY_API>,   app     = thingy_app(),   package = \"thingyr\" )  # which leads to this call: credentials_user_oauth2(   scopes  = <SCOPES_NEEDED_FOR_THE_THINGY_API>,   app     = thingy_app(),   package = \"thingyr\" ) gargle2.0_token(   email   = gargle_oauth_email(),   app     = thingy_app(),   package = \"thingyr\",   scope   = <SCOPES_NEEDED_FOR_THE_THINGY_API>,   cache   = gargle_oauth_cache() ) The thingyr package is requesting access to your Google account. Enter '1' to start a new auth process or select a pre-authorized account. 1: Send me to the browser for a new auth process. 2: janedoe_personal@gmail.com 3: janedoe@example.com 4: janedoe_work@gmail.com Selection: thingy_auth(email = \"janedoe_work@gmail.com\") gargle_oauth_sitrep() #> 14 tokens found in this gargle OAuth cache: #> ~/Library/Caches/gargle #' #' email                         app         scopes                         hash... #' ----------------------------- ----------- ------------------------------ ---------- #' abcdefghijklm@gmail.com       thingy      ...bigquery, ...cloud-platform 128f9cc... #' buzzy@example.org             gargle-demo                                15acf95... #' stella@example.org            gargle-demo ...drive                       4281945... #' abcdefghijklm@gmail.com       gargle-demo ...drive                       48e7e76... #' abcdefghijklm@gmail.com       tidyverse                                  69a7353... #' nopqr@ABCDEFG.com             tidyverse   ...spreadsheets.readonly       86a70b9... #' abcdefghijklm@gmail.com       tidyverse   ...drive                       d9443db... #' nopqr@HIJKLMN.com             tidyverse   ...drive                       d9443db... #' nopqr@ABCDEFG.com             tidyverse   ...drive                       d9443db... #' stuvwzyzabcd@gmail.com        tidyverse   ...drive                       d9443db... #' efghijklmnopqrtsuvw@gmail.com tidyverse   ...drive                       d9443db... #' abcdefghijklm@gmail.com       tidyverse   ...drive.readonly              ecd11fa... #' abcdefghijklm@gmail.com       tidyverse   ...bigquery, ...cloud-platform ece63f4... #' nopqr@ABCDEFG.com             tidyverse   ...spreadsheets                f178dd8..."},{"path":"https://gargle.r-lib.org/dev/articles/how-gargle-gets-tokens.html","id":"manipulate-the-credential-function-registry","dir":"Articles","previous_headings":"","what":"Manipulate the credential function registry","title":"How gargle gets tokens","text":"Recall can get overview credential functions token_fetch() works like : Sometimes one auth methods “work”, one actually “works” , sadly, ’s first one. case, gargle successfully gets token, experience token-related failure downstream work. common example someone working Google Compute Engine (GCE), prefer auth normal user, default service account. Let’s say want prevent token_fetch() even trying one specific auth method, clearing way automagically use method want. can remove specific credential function registry. ’s scenario described , want skip GCE-specific auth: Learn docs cred_funs_list(). can even make narrowly scoped changes registry local_cred_funs() with_cred_funs().","code":"writeLines(names(cred_funs_list())) #> credentials_byo_oauth2 #> credentials_service_account #> credentials_external_account #> credentials_app_default #> credentials_gce #> credentials_user_oauth2 gargle::cred_funs_add(credentials_gce = NULL)"},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"overview-of-the-approach","dir":"Articles","previous_headings":"","what":"Overview of the approach","title":"Managing tokens securely","text":"Generate encryption key (basically password) give self-documenting name, e.g. GARGLE_KEY. Store environment variable. Identify secret file interest, JSON representing service account token. presumably stored outside package. Use key apply method symmetric encryption target file. Store resulting encrypted file designated location within package. Check platform support keeping key concealed. Make sure don’t anything code dump log file, printing environment variables.","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"choose-a-name-for-the-encryption-key","dir":"Articles","previous_headings":"Annotated code-through","what":"Choose a name for the encryption key","title":"Managing tokens securely","text":"Pick name encryption key. recommend clearly associated whatever package data product plan use . example, gargle’s testing credentials encrypted key named GARGLE_KEY. don’t need store name variable. ’re makes exposition easier.","code":"key_name <- \"SOMETHING_KEY\""},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"generate-the-encryption-key","dir":"Articles","previous_headings":"Annotated code-through","what":"Generate the encryption key","title":"Managing tokens securely","text":"real life, keep output secret_make_key() ! reveal part exposition. gargle::secret_make_key() copy httr2::secret_make_key().","code":"key <- secret_make_key() key #> [1] \"EKg3OBgTS76MavUGtPw6YQ\""},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"define-environment-variable-in-local--renviron","dir":"Articles","previous_headings":"Annotated code-through","what":"Define environment variable in local .Renviron","title":"Managing tokens securely","text":"Combine key name value form line like user-level .Renviron file: usethis::edit_r_environ() can help create open file. strongly recommend using user-level .Renviron, opposed project-level, makes less likely share sensitive information mistake. reason choose store key file inside Git repo, must make sure file listed .gitignore. still prevent leaking secret , example, project directory syncs DropBox Google Drive (.e. service real notion “ignore” file). Remember ’ll need restart R (call readRenviron(\"~/.Renviron\")) newly defined environment variable take effect. interactive session, can call Sys.getenv() quick check key setup correctly locally: Sys.getenv() call exactly sort thing careful deployed setting, result (semi-)public log file.","code":"SOMETHING_KEY=EKg3OBgTS76MavUGtPw6YQ Sys.getenv(\"SOMETHING_KEY\") #> [1] \"EKg3OBgTS76MavUGtPw6YQ\""},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"encrypt-credentials","dir":"Articles","previous_headings":"Annotated code-through","what":"Encrypt credentials","title":"Managing tokens securely","text":"Google auth ecosystem involves different types secrets, require slightly different handling ’re placing encrypted version inside project.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"encrypt-a-json-file","dir":"Articles","previous_headings":"Annotated code-through > Encrypt credentials","what":"Encrypt a JSON file","title":"Managing tokens securely","text":"secret_encrypt_json() gargle-specific function, built top httr2’s secret management machinery. JSON files strings especially relevant auth Google ecosystem. interested secret_encrypt_json() want encrypt service account key (, even, OAuth client). secret_encrypt_json() takes 3 arguments: json: probably path JSON file, JSON string also acceptable. path: path write encrypted JSON . Technically optional, function mostly exists write file. key: name environment variable holds encryption key. example shows googledrive’s testing credentials placed inside package source. googledrive-testing.json JSON file downloaded service account managed via Google API / Cloud Platform console: writes encrypted version googledrive-testing.json inst/secret/googledrive-testing.json relative current working directory, presumably top-level directory googledrive’s source. encrypted file committed pushed. Later show use secret_decypt_json() decrypt token.","code":"secret_encrypt_json(   json = \"~/some/place/where/I/keep/secret/stuff/googledrive-testing.json\",   path = \"inst/secret/googledrive-testing.json\",   key = \"GOOGLEDRIVE_KEY\" )"},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"encrypt-an-r-object","dir":"Articles","previous_headings":"Annotated code-through > Encrypt credentials","what":"Encrypt an R object","title":"Managing tokens securely","text":"gargle::secret_write_rds() copy httr2::secret_write_rds(), exported gargle convenience. must encrypt R object, Gargle2.0 user token, function need. note quite rare encrypt user token. possible, use service account instead. secret_write_rds() takes 3 arguments: x: R object encrypt. gargle context, usually token. successful OAuth dance, wrapper packages often provide access token function like googledrive::drive_token(), googlesheets4::gs4_token(), bigrquery::bq_token(), gmailr::gm_token(). path: path write encrypted object . Technically optional, function mostly exists write file. key: name environment variable holds encryption key. example shows encrypted googlesheets4 user token placed inside .secrets/ directory project, e.g. Shiny app intended deployment. writes encrypted version token .secrets/gs4-token.rds. encrypted file committed pushed/deployed. Later show use gargle::secret_read_rds() decrypt token.","code":"library(googlesheets4)  dir.create(\".secrets\")  # get a token and DO NOT CACHE IT gs4_auth(\"someone@example.com\", cache = FALSE)  # encrypt the token and write to file gargle::secret_write_rds(   gs4_token(),   \".secrets/gs4-token.rds\",   key = \"SOMETHING_KEY\" )"},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"provide-environment-variable-to-other-services","dir":"Articles","previous_headings":"Annotated code-through","what":"Provide environment variable to other services","title":"Managing tokens securely","text":"’s make encryption key available code running elsewhere.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"github-actions","dir":"Articles","previous_headings":"Annotated code-through > Provide environment variable to other services","what":"GitHub Actions:","title":"Managing tokens securely","text":"Define environment variable encrypted secret repo: https://docs.github.com/en/actions/security-guides/encrypted-secrets Use secrets context expose secret environment variable workflows. look like like , appropriate place workflow file: secret, therefore associated environment variable, available workflows triggered via external pull request.","code":"env:   SOMETHING_KEY: ${{ secrets.SOMETHING_KEY }}"},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"r-hub","dir":"Articles","previous_headings":"Annotated code-through > Provide environment variable to other services","what":"R-hub","title":"Managing tokens securely","text":"Send environment variable calls rhub::check() friends:","code":"rhub::check(env_vars = Sys.getenv(\"SOMETHING_KEY\", names = TRUE))"},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"posit-connect","dir":"Articles","previous_headings":"Annotated code-through > Provide environment variable to other services","what":"Posit Connect","title":"Managing tokens securely","text":"Define environment variable {X} Vars pane dashboard content: https://docs.posit.co/connect/user/content-settings/#content-vars","code":""},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"using-encrypted-credentials","dir":"Articles","previous_headings":"Annotated code-through","what":"Using encrypted credentials","title":"Managing tokens securely","text":"come surprise secret_encrypt_json() secret_write_rds() companion function decryption: secret_decrypt_json() secret_read_rds(), respectively.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"decrypt-a-json-file","dir":"Articles","previous_headings":"Annotated code-through > Using encrypted credentials","what":"Decrypt a JSON file","title":"Managing tokens securely","text":"Recall example encrypted JSON specifying service account token, use CI googledrive. ’s use secret_decrypt_json() decrypt token direct googledrive use :","code":"library(googledrive)  drive_auth(   path = gargle::secret_decrypt_json(     system.file(\"secret\", \"googledrive-testing.json\", package = \"googledrive\"),     \"GOOGLEDRIVE_KEY\"   ) )"},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"decrypt-a-user-token","dir":"Articles","previous_headings":"Annotated code-through > Using encrypted credentials","what":"Decrypt a user token","title":"Managing tokens securely","text":"Recall example encrypted googlesheets4 user token, use inside something like deployed Shiny app. ’s use secret_read_rds() decrypt token direct googlesheets4 use :","code":"library(googlesheets4)  gs4_auth(token = gargle::secret_read_rds(   \".secrets/gs4-token.rds\",   key = \"SOMETHING_KEY\" ))"},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"anticipating-decryption-failure","dir":"Articles","previous_headings":"Annotated code-through","what":"Anticipating decryption failure","title":"Managing tokens securely","text":"snippets great work, .e. \"SOMETHING_KEY\" available decryption. key isn’t available? want rig things graceful, informative failure case. ’re using encrypted testing credentials, CRAN going able decrypt . want affected tests skipped case, error. Likewise, external pull request won’t able use testing credentials, also want test skipping . ’re using encrypted credentials Shiny app, might want make provision encryption key unavailable. person likely benefit , .e. ’re trying figure app isn’t working. ’s nice clear signal encryption key unavailable instead mysterious deployment failure.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"condition-on-key-availability","dir":"Articles","previous_headings":"Annotated code-through > Anticipating decryption failure","what":"Condition on key availability","title":"Managing tokens securely","text":"secret_has_key(\"SOMETHING_KEY\") reports whether \"SOMETHING_KEY\" environment variable defined. deployed data product, might want call secret_has_key() attempt decrypt secret. encryption key available, report finding arrange something graceful instead erroring, especially cryptic, difficult--debug way.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"automatic-skips","dir":"Articles","previous_headings":"Annotated code-through > Anticipating decryption failure","what":"Automatic skips","title":"Managing tokens securely","text":"secret_* functions built-feature , called testing, encryption key unavailable, test skipped. behaviour implemented internal helper secret_get_key(), looks something like : envvar (presumably, SOMETHING_KEY like) undefined, tests, test just skipped. Note “tests” defined is_testing() returns TRUE. is_testing() helper defined like : Therefore automatic skipping happen automated testing, including CRAN, external contributors. automatic skips won’t kick ’re just, e.g., running single test “hand”. \"TESTTHAT\" environment variable set functions like devtools::test() testthat::test_file(). also point test skipping achieved packages like googledrive, googlesheets4, bigrquery, gmailr. packages designed load token internal auth state, use token downstream requests. means individual requests tests won’t ever call secret_decrypt_json() secret_read_rds(), automatic skips aren’t relevant. packages make different arrangements skipping auth-requiring tests testing credentials unavailable. source code packages best place learn . Start consulting package’s tests/testthat/helper.R file.","code":"secret_get_key <- function(envvar) {   key <- Sys.getenv(envvar)      if (identical(key, \"\")) {     if (is_testing()) {       msg <- glue(\"Env var {envvar} not defined.\")       testthat::skip(msg)     } else {       # error     }   }   # return the key } is_testing <- function() {   identical(Sys.getenv(\"TESTTHAT\"), \"true\") }"},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"ci-configuration","dir":"Articles","previous_headings":"Annotated code-through > Anticipating decryption failure","what":"CI configuration","title":"Managing tokens securely","text":"recommend actively check package “decryption, token” scenario, discover problems CRAN contributors . fact, probably default situation R CMD check workflow. auth-requiring package, usually two R CMD check workflows: R-CMD-check.yaml main workflow, tests package relatively large matrix operating systems R versions. workflow access encryption key. -auth.yaml another R CMD check workflow checks released version R, ubuntu-latest. workflow access encryption key. ’s bit .yaml file happens: Look GitHub Actions workflow configurations googledrive, googlesheets4, bigrquery, gmailr, see concrete examples.","code":"- uses: r-lib/actions/check-r-package@v2         env:           SOMETHING_KEY: ${{ secrets.SOMETHING_KEY }}"},{"path":"https://gargle.r-lib.org/dev/articles/managing-tokens-securely.html","id":"resources","dir":"Articles","previous_headings":"","what":"Resources","title":"Managing tokens securely","text":"Wrapping APIs vignette httr2 package, specifically “Secret management” section. cryptography work? vignette sodium package, specifically “Symmetric encryption” section.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/non-interactive-auth.html","id":"provide-a-token-or-pre-authorize-token-discovery","dir":"Articles","previous_headings":"","what":"Provide a token or pre-authorize token discovery","title":"Non-interactive auth","text":"main principle auth require user interaction: Provide token directly take advance measures indicate want token discovered. present several ways achieve , basically order preference.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/non-interactive-auth.html","id":"sidebar-1-deployment","dir":"Articles","previous_headings":"","what":"Sidebar 1: Deployment","title":"Non-interactive auth","text":"First, word deployed environments. doesn’t apply , skip section. Let’s identify specific type project: developed one place, interactivity – local computer – deployed elsewhere, must run without interaction – Posit Connect shinyapps.io. context, may make sense depart gargle’s default behaviour, store tokens outside project, embed project instead. example end vignette demonstrates use project-level OAuth cache. service account token also stored project. embed tokens project deploy, remember, , default, secure hidden source files project. vignette(\"managing-tokens-securely\") describes method embedding encrypted token project, extra level care needed want access credentials within, e.g., continuous integration service, GitHub Actions.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/non-interactive-auth.html","id":"sidebar-2-i-just-want-my--rmd-to-render","dir":"Articles","previous_headings":"","what":"Sidebar 2: I just want my .Rmd to render","title":"Non-interactive auth","text":"TL;DR need successfully authenticate interactive session , code, give gargle permission use token finds cache. sorts commands achieve : end article, scenario explained detail, want understand works.","code":"# Approach #1: use an option. # Either specify the user: options(gargle_oauth_email = \"jenny@example.com\") # Or, if you only use one Google identity, you can be more vague: options(gargle_oauth_email = TRUE) # Or, you can specify the identity to use at the domain level: options(gargle_oauth_email = \"*@example.com\")  # Approach #2: call PACKAGE_auth() proactively. library(googledrive) # Either specify the user: drive_auth(email = \"jenny@example.com\") # Or, if you only use one Google identity, you can be more vague: drive_auth(email = TRUE) # Or, you can specify the identity to use at the domain level: drive_auth(email = \"*@example.com\")"},{"path":"https://gargle.r-lib.org/dev/articles/non-interactive-auth.html","id":"embrace-credentials-available-in-certain-cloud-settings","dir":"Articles","previous_headings":"","what":"Embrace credentials available in certain cloud settings","title":"Non-interactive auth","text":"certain cloud computing contexts, service account token may ambiently available (can arrange true). Think : workload running Google Compute Engine (GCE), ’s already “inside Google house”. seems like way avoid another round auth indeed case. Another advantage cloud auth workflows never need download carefully manage file contains sensitive information. often described “keyless”. can use one methods, seriously consider .","code":""},{"path":"https://gargle.r-lib.org/dev/articles/non-interactive-auth.html","id":"google-compute-engine","dir":"Articles","previous_headings":"Embrace credentials available in certain cloud settings","what":"Google Compute Engine","title":"Non-interactive auth","text":"section applies code running GCE instance, either literally, another Google Cloud product built top GCE. consider Google’s documentation definitive, ’ll try give useful summary explain gargle works GCE: https://cloud.google.com/compute/docs/access/create-enable-service-accounts--instances Google Cloud Platform (GCP) project generally GCE default service account , default, new GCE instance runs service account. (wish, can use different service account taking explicit steps create instance modifying ’s stopped.) main point , application running GCE, service account identity generally available. GCE allows applications get OAuth access token metadata server gargle::credentials_gce() (one functions tried gargle::token_fetch(), called wrapper packages). token request can made specific scopes , general, wrapper packages indeed asking specific scopes relevant API access. Consider signature googledrive::drive_auth(): googledrive package asks token \"drive\" scope, default. brings one big gotcha using packages like googledrive googlesheets4 GCE. default, GCE instance running default service account, \"cloud-platform\" scope , generally speaking, allow service account work various Cloud products. However, \"cloud-platform\" scope permit operations non-Cloud APIs, Drive Sheets. want service account identity GCE instance able get access token use Drive Sheets, need explicitly add, e.g., \"drive\" scope create instance (stop instance add scope). (Note , contrast, BigQuery considered Cloud product therefore bigrquery can operate \"cloud-platform\" scope.) aware might also need explicitly grant service account appropriate level access (e.g. read write) Drive files intend work . Finally, want opt-using default service account , instead, auth normal user, even though GCE, also possible. One way achieve remove credentials_gce() set auth functions tried gargle::token_fetch() executing command explicit implicit auth happens: can make similar change scoped way helpers gargle::with_cred_funs() gargle::local_cred_funs().","code":"drive_auth <- function(email = gargle::gargle_oauth_email(),                        path = NULL,                        scopes = \"https://www.googleapis.com/auth/drive\",                        cache = gargle::gargle_oauth_cache(),                        use_oob = gargle::gargle_oob_default(),                        token = NULL) { ... } # removes `credentials_gce()` from gargle's registry gargle::cred_funs_add(credentials_gce = NULL)"},{"path":"https://gargle.r-lib.org/dev/articles/non-interactive-auth.html","id":"workload-identity-on-google-kubernetes-engine-gke","dir":"Articles","previous_headings":"Embrace credentials available in certain cloud settings","what":"Workload Identity on Google Kubernetes Engine (GKE)","title":"Non-interactive auth","text":"discuss gargle’s GCE auth can work related service, Google Kubernetes Engine (GKE), using Workload Identity. complicated direct usage GCE extra configuration needed make service account’s metadata available GKE instance discover. GKE underlying technology behind Google’s managed Airflow service, Cloud Composer, also applies R docker files called environment. Workload Identity recommended way authentication GKE places, possible, since eliminates use file holds service key, potential security risk. Following Workload Identity docs, create service account normal give permissions scopes needed , say, upload BigQuery. Imagine -service-key@-project.iam.gserviceaccount.com https://www.googleapis.com/auth/bigquery scope. Instead downloading JSON key, instead migrate permission adding policy binding another service account within Kubernetes. Create service account within Kubernetes, ideally within new namespace: Bind Kubernetes service account service account outside Kubernetes created step 1, assign annotation: key now available add pods within cluster. Airflow, can pass using Python code GKEStartPodOperator(...., namespace='-namespace', service_account_name='bq-service-account'). Documentation around GKEStartPodOperator() within Cloud Composer can found . order R function gargle::gce_credentials() right thing, need two things: Set \"gargle.gce.use_ip\" option TRUE, order use metadata server ’s relevant GKE. Specify target service account, .e. can’t just passively accept default, use \"default\" service account. gce_instance_service_accounts() can helpful, e.g., want know service accounts Docker container can see. example code might execute Docker container: Let’s assume PKG R package implements gargle auth standard way, bigrquery googledrive. time writing service_account argument exposed usual, high-level PKG_auth() function (https://github.com/r-lib/gargle/issues/249. need use non-default service account, need call credentials_gce() directly pass token PKG_auth(): ’s example might look:","code":"# create namespace kubectl create namespace my-namespace # Create Kubernetes service account kubectl create serviceaccount --namespace my-namespace bq-service-account # Create IAM policy binding betwwen k8s SA and GSA gcloud iam service-accounts add-iam-policy-binding my-service-key@my-project.iam.gserviceaccount.com \\     --role roles/iam.workloadIdentityUser \\     --member \"serviceAccount:my-project.svc.id.goog[my-namespace/bq-service-account]\" # Annotate k8s SA kubectl annotate serviceaccount bq-service-account \\     --namespace my-namespace \\     iam.gke.io/gcp-service-account=my-service-key@my-project.iam.gserviceaccount.com options(gargle.gce.use_ip = TRUE) t <- gargle::credentials_gce(\"my-service-key@my-project.iam.gserviceaccount.com\") # ... do authenticated stuff with the token t ... library(PKG)  options(gargle.gce.use_ip = TRUE) t <- gargle::credentials_gce(   \"my-service-key@my-project.iam.gserviceaccount.com\", # use YOUR service account   scopes = \"https://www.googleapis.com/auth/PKG\"       # use REAL scopes ) PKG_auth(token = t) # ... do authenticated stuff..."},{"path":"https://gargle.r-lib.org/dev/articles/non-interactive-auth.html","id":"aws","dir":"Articles","previous_headings":"Embrace credentials available in certain cloud settings","what":"AWS","title":"Non-interactive auth","text":"Keyless auth even possible non-Google cloud platforms, using Workload identity federation. implemented experimental function credentials_external_account(), currently supports AWS.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/non-interactive-auth.html","id":"provide-a-service-account-token-directly","dir":"Articles","previous_headings":"","what":"Provide a service account token directly","title":"Non-interactive auth","text":"two computers talking , possibly human involvement, appropriate type token use service account token. ’re working cloud context automatic access service account (see previous section), can still use service account, require explicit effort. Create service account download credentials JSON file. described vignette(\"get-api-credentials\"), specifically Service account token section. Call wrapper package’s main auth function proactively provide path JSON file. Example using googledrive: code running , e.g., continuous integration service need use encrypted token, see vignette(\"managing-tokens-securely\"). certain APIs, service accounts inherently awkward, often want things behalf specific user. Gmail good example. sending email programmatically, probably want send (specific email account) instead zestybus-geosyogl@fuffapster-654321.iam.gserviceaccount.com. , fact, possible described “impersonation”, tip Google exactly encourage workflow. details: requires “delegating domain-wide authority” service account. possible context G Suite domain administrator domain can set . domain-wide authority granted specific scopes, can narrow possible. may make domain administrator receptive idea. Delegating domain-wide authority service account Google Identity Platform docs Perform G Suite Domain-Wide Delegation Authority G Suite Admin SDK docs subject argument credentials_service_account() credentials_app_default() available specify user impersonate, e.g. subject = \"user@example.com\". argument first appeared gargle 0.5.0, may necessarily exposed yet user-facing auth functions like drive_auth(). need subject client package, reasonable feature request. also possible get token explicit call , e.g., credentials_service_account() pass token auth function: delegation domain-wide authority impossible unappealing, must use OAuth user token, described .","code":"library(googledrive)  drive_auth(path = \"/path/to/your/service-account-token.json\") t <- gargle::credentials_service_account(   path = \"/path/to/your/service-account-token.json\",   scopes = ...,   subject = \"user@example.com\" ) googledrive::dive_auth(token = t)"},{"path":"https://gargle.r-lib.org/dev/articles/non-interactive-auth.html","id":"rig-a-service-or-external-account-for-use-with-application-default-credentials","dir":"Articles","previous_headings":"","what":"Rig a service or external account for use with Application Default Credentials","title":"Non-interactive auth","text":"Wrapper packages use gargle::token_fetch() recommended way access token search strategy known Application Default Credentials. need put JSON corresponding service external account specific location , alternatively, record location JSON file specific environment variable. Full details credentials_app_default() section vignette(\"-gargle-gets-tokens\"). token rigged properly, need anything else, .e. need call PACKAGE_auth() explicitly. token just get discovered upon first need. troubleshooting purposes, can set gargle option see verbose output execution gargle::token_fetch(): withr-style convenience helpers also exist: with_gargle_verbosity() local_gargle_verbosity().","code":"options(gargle_verbosity = \"debug\")"},{"path":"https://gargle.r-lib.org/dev/articles/non-interactive-auth.html","id":"provide-an-oauth-token-directly","dir":"Articles","previous_headings":"","what":"Provide an OAuth token directly","title":"Non-interactive auth","text":"somehow OAuth token want use R object, can provide directly token argument main auth function. Example using googledrive: gargle caches OAuth user token obtains .rds file, default. know filepath token want use, use readRDS() read provide token argument wrapper’s auth function. Example using googledrive: know filepath? requires attention location gargle’s OAuth token cache folder, described next section. Full details credentials_byo_oauth2() section vignette(\"-gargle-gets-tokens\").","code":"library(googledrive)  my_oauth_token <- # some process that results in the token you want to use drive_auth(token = my_oauth_token) # googledrive drive_auth(token = readRDS(\"/path/to/your/oauth-token.rds\"))"},{"path":"https://gargle.r-lib.org/dev/articles/non-interactive-auth.html","id":"arrange-for-an-oauth-user-token-to-be-re-discovered","dir":"Articles","previous_headings":"","what":"Arrange for an OAuth user token to be re-discovered","title":"Non-interactive auth","text":"least recommended strategy, appeals many users, doesn’t require creating service account. Just remember perceived ease using token already (OAuth user token) quickly cancelled greater difficulty managing tokens non-interactive use. might forced use strategy certain APIs, Gmail, difficult use service account. Two main principles: Take charge – least notice – folder OAuth tokens cached. Make sure exactly one cached token identified pre-authorize use. many ways . ’ll work several examples using convey range ’s possible.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/non-interactive-auth.html","id":"i-just-want-my--rmd-to-render","dir":"Articles","previous_headings":"Arrange for an OAuth user token to be re-discovered","what":"I just want my .Rmd to render","title":"Non-interactive auth","text":"Step 1: Get first token. must run code least , interactively, auth dance, allow gargle store token cache. Step 2: Revise code pre-authorize use token next time. Now .Rmd can rendered .R script can run, without interaction. two choices make: option-based approach can implemented .Rmd .R user-level project level .Rprofile startup file. email = TRUE works ’re going find, , 1 token, .e. always auth identity email = \"jane@example.com\" pre-authorizes use token associated specific identity email = \"*@example.com\" pre-authorizes use token associated identity specific domain; good code might executed machines alice@example.com bob@example.com sets option allows gargle use cached tokens whenever ’s unique match: sets option use tokens associated specific email address: sets option use tokens associated email address specific domain: gets token right now allows use matching token, using googledrive example: gets token right now, user specific email address: gets token right now, first checking cache token associated specific domain:","code":"library(googledrive)  # do anything that triggers auth drive_find(n_max = 5) options(gargle_oauth_email = TRUE) options(gargle_oauth_email = \"jenny@example.com\") options(gargle_oauth_email = \"*@example.com\") drive_auth(email = TRUE) drive_auth(email = \"jenny@example.com\") drive_auth(email = \"*@example.com\")"},{"path":"https://gargle.r-lib.org/dev/articles/non-interactive-auth.html","id":"project-level-oauth-cache","dir":"Articles","previous_headings":"Arrange for an OAuth user token to be re-discovered","what":"Project-level OAuth cache","title":"Non-interactive auth","text":"like previous example, added twist: use project-level OAuth cache. good deployed data products. Step 1: Obtain token intended non-interactive use make sure ’s cached (hidden) directory current project. Using googledrive example: setup per project. Another way accomplish setup specify desired cache location directly call auth function: Step 2: downstream use, announce location cache pre-authorize use suitable token discovered . Continuing googledrive example: Setting option gargle_oauth_email = TRUE says googledrive allowed use token finds cache, without interacting user, long discovers EXACTLY one matching token. option-setting code needs appear script, .Rmd, app needs use token non-interactively. Depending context, might suitable accomplish startup file, e.g. project-level .Rprofile. ’s variation say token use explicitly specifying associated email. handy ’s reason one token cache. ’s another variation specify necessary info directly auth call, instead options: ’s one last variation ’s applicable local cache contain multiple tokens: intentional paths working directory. Personally use ::(\".secrets)\" everywhere , make things robust. troubleshooting purposes, can set gargle option see verbose output execution gargle::token_fetch(): withr-style convenience helpers also exist: with_gargle_verbosity() local_gargle_verbosity(). cached token considered “match”, must match current request respect user’s email, scopes, OAuth client (client ID key secret). design, settings low visibility, usually want use defaults. token discovered, consider fields might explain mismatch.","code":"library(googledrive)  # designate project-specific cache options(gargle_oauth_cache = \".secrets\")  # check the value of the option, if you like gargle::gargle_oauth_cache()  # trigger auth on purpose --> store a token in the specified cache drive_auth()  # see your token file in the cache, if you like list.files(\".secrets/\") library(googledrive)  # trigger auth on purpose --> store a token in the specified cache drive_auth(cache = \".secrets\") library(googledrive)  options(   gargle_oauth_cache = \".secrets\",   gargle_oauth_email = TRUE )  # now use googledrive with no need for explicit auth drive_find(n_max = 5) library(googledrive)  options(   gargle_oauth_cache = \".secrets\",   gargle_oauth_email = \"jenny@example.com\" )  # now use googledrive with no need for explicit auth drive_find(n_max = 5) library(googledrive)  drive_auth(cache = \".secrets\", email = TRUE)  # now use googledrive with no need for explicit auth drive_find(n_max = 5) library(googledrive)  drive_auth(cache = \".secrets\", email = \"jenny@example.com\")  # now use googledrive with no need for explicit auth drive_find(n_max = 5) options(gargle_verbosity = \"debug\")"},{"path":"https://gargle.r-lib.org/dev/articles/oauth-client-not-app.html","id":"why-change-was-needed","dir":"Articles","previous_headings":"","what":"Why change was needed","title":"Transition from OAuth app to OAuth client","text":"2022, Google partially deprecated --band (OOB) OAuth flow. OOB flow used R users working Google APIs use R browser, via RStudio Server, Posit Workbench, Posit Cloud, Google Colaboratory. Conventional OOB auth still works certain conditions, example, OAuth client associated GCP project testing mode internal Google Workspace. conventional OOB longer supported projects serve external users production mode. particular, means conventional OOB longer supported GCP project historically made auth “just work” casual users packages googledrive, googlesheets4, bigrquery. default OAuth client used package longer works conventional OOB. response, v1.3.0, gargle implements new variant OOB, called pseudo-OOB, continue provide user-friendly auth flow googledrive/googlesheets4/bigrquery RStudio Server/Posit Workbench/Posit Cloud/Google Colaboratory. pseudo-OOB flow also available developers use. flow triggered use_oob = TRUE (existing convention gargle gargle-using packages) configured OAuth client web type (creating OAuth client, called “Web application” type). past, gargle basically assumed every OAuth client installed type (creating OAuth client, called “Desktop app” type). Therefore, introduction pseudo-OOB meant gargle learn different OAuth client types (web vs. installed). didn’t play well httr::oauth_app(), gargle using store client ID secret. ’s new S3 class, \"gargle_oauth_client\", constructor name. Since information now necessary instantiate client (e.g. type , potentially, redirect URIs), recommended way create client provide JSON downloaded GCP console gargle_oauth_client_from_json(). Since introduce new S3 class supporting functions, also took chance make vocabulary pivot “OAuth app” “OAuth client”. Google’s documentation always talked “OAuth client”, natural. vocabulary also future-facing, anticipating day gargle might shift httr httr2, uses httr2:oauth_client(). bridging measure, \"gargle_oauth_client\" class currently inherits httr’s \"oauth_app\", probably won’t true long-term.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/oauth-client-not-app.html","id":"how-to-instantiate-an-oauth-client-in-r","dir":"Articles","previous_headings":"Why change was needed","what":"How to instantiate an OAuth client in R","title":"Transition from OAuth app to OAuth client","text":"auth via gargle, recommended changes: Stop using httr::oauth_app() gargle::oauth_app_from_json() instantiate OAuth client. Start using gargle_oauth_client_from_json() (strongly recommended) gargle_oauth_client() instead. advice applies anything inside package also encourage document users. gargle ships JSON files two non-functional OAuth clients, just make concrete: Notice difference JSON installed vs. web client. Note class client object, new type field, redirect_uris.","code":"(path_to_installed_client <- system.file(   \"extdata\", \"client_secret_installed.googleusercontent.com.json\",   package = \"gargle\" )) #> [1] \"/home/runner/work/_temp/Library/gargle/extdata/client_secret_installed.googleusercontent.com.json\" jsonlite::prettify(scan(path_to_installed_client, what = character())) #> { #>     \"installed\": { #>         \"client_id\": \"abc.apps.googleusercontent.com\", #>         \"project_id\": \"a_project\", #>         \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\", #>         \"token_uri\": \"https://accounts.google.com/o/oauth2/token\", #>         \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\", #>         \"client_secret\": \"ssshh-i-am-a-secret\", #>         \"redirect_uris\": [ #>             \"http://localhost\" #>         ] #>     } #> } #>  (client <- gargle_oauth_client_from_json(path_to_installed_client)) #> <gargle_oauth_client> #> name: a_project_d1c5a8066d2cbe48e8d94514dd286163 #> id: abc.apps.googleusercontent.com #> secret: <REDACTED> #> type: installed #> redirect_uris: http://localhost class(client) #> [1] \"gargle_oauth_client\" \"oauth_app\"  (path_to_web_client <- system.file(   \"extdata\", \"client_secret_web.googleusercontent.com.json\",   package = \"gargle\" )) #> [1] \"/home/runner/work/_temp/Library/gargle/extdata/client_secret_web.googleusercontent.com.json\" jsonlite::prettify(scan(path_to_web_client, what = character())) #> { #>     \"web\": { #>         \"client_id\": \"abc.apps.googleusercontent.com\", #>         \"project_id\": \"a_project\", #>         \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\", #>         \"token_uri\": \"https://accounts.google.com/o/oauth2/token\", #>         \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\", #>         \"client_secret\": \"ssshh-i-am-a-secret\", #>         \"redirect_uris\": [ #>             \"https://www.tidyverse.org/google-callback/\" #>         ] #>     } #> } #>  (client <- gargle_oauth_client_from_json(path_to_web_client)) #> <gargle_oauth_client> #> name: a_project_d1c5a8066d2cbe48e8d94514dd286163 #> id: abc.apps.googleusercontent.com #> secret: <REDACTED> #> type: web #> redirect_uris: https://www.tidyverse.org/google-callback/ class(client) #> [1] \"gargle_oauth_client\" \"oauth_app\""},{"path":"https://gargle.r-lib.org/dev/articles/oauth-client-not-app.html","id":"authstate-class","dir":"Articles","previous_headings":"","what":"AuthState class","title":"Transition from OAuth app to OAuth client","text":"two gargle classes impacted OAuth-app--client switch: AuthState Gargle2.0. cover AuthState Gargle2.0 next section. wrapper package follows design laid vignette(\"gargle-auth--client-package\"), use instance AuthState manage package’s auth state. Let’s assume internal object named .auth, usually . changes need know AuthState: app field deprecated, favor new field client. request .auth$app, deprecation message client field returned. $set_app() method deprecated, favor new $set_client() method. call .auth$set_app(), deprecation message input used, instead, set client field. app argument init_AuthState() constructor deprecated favor new client argument. call init_AuthState(app = x), deprecation message input x used client argument instead. changes probably need make package: first argument user-facing function, PKG_auth_configure(), become client (new). Move existing app argument last position deprecate . Deprecate PKG_oauth_app() (function reveal user’s configured OAuth client). Introduce PKG_oauth_client() replace PKG_oauth_app(). ’s googledrive::drive_auth_configure() googledrive::drive_oauth_client() looked transition: approach follows various conventions explained vignette(\"communicate\", package = \"lifecycle\"). also choose use lifecycle package assist process, usethis::use_lifecycle() function helpful one-time setup package: roxygen documentation helpers gargle assume PKG_auth_configure() adapted shown : PREFIX_auth_configure_description() crosslinks PREFIX_oauth_client() now, PREFIX_oauth_app(). PREFIX_auth_configure_params() documents client argument PREFIX_auth_configure_params() uses lifecycle badge text communicate app deprecated. PREFIX_auth_configure_params() crosslinks gargle::gargle_oauth_client_from_json() requires gargle (>= 1.3.0)","code":"# BEFORE drive_auth_configure <- function(app, path, api_key) {   # not showing this code   .auth$set_app(app)   # more code we're not showing }  drive_oauth_app <- function() .auth$app  # AFTER drive_auth_configure <- function(client, path, api_key, app = deprecated()) {   if (lifecycle::is_present(app)) {     lifecycle::deprecate_warn(       \"2.1.0\",       \"drive_auth_configure(app)\",       \"drive_auth_configure(client)\"     )     drive_auth_configure(client = app, path = path, api_key = api_key)   }       # not showing this code   .auth$set_client(client)   # more code we're not showing }  drive_oauth_client <- function() .auth$client  drive_oauth_app <- function() {   lifecycle::deprecate_warn(     \"2.1.0\", \"drive_oauth_app()\", \"drive_oauth_client()\"   )   drive_oauth_client() } usethis::use_lifecycle()"},{"path":"https://gargle.r-lib.org/dev/articles/oauth-client-not-app.html","id":"gargle2-0-class","dir":"Articles","previous_headings":"","what":"Gargle2.0 class","title":"Transition from OAuth app to OAuth client","text":"Gargle2.0 second gargle class impacted OAuth-app--client switch. changes probably need make package: Inside PKG_auth(), presumably call gargle::token_fetch(). passing app = <SOMETHING>, change client = <SOMETHING>. Neither app client formal arguments gargle::token_fetch(), instead, intended eventual use gargle::credentials_user_oauth2(). ’s sketch looks googledrive::drive_auth(): ever call gargle::credentials_user_oauth2() directly, use new client argument instead deprecated app argument.","code":"drive_auth <- function(...) {   # code not shown   cred <- gargle::token_fetch(     scopes = scopes,     # app = drive_oauth_client() %||% <BUILT_IN_DEFAULT_CLIENT>,   # BEFORE     client = drive_oauth_client() %||% <BUILT_IN_DEFAULT_CLIENT>,  # AFTER     email = email,     path = path,     package = \"googledrive\",     cache = cache,     use_oob = use_oob,     token = token   )   # code not shown }"},{"path":"https://gargle.r-lib.org/dev/articles/request-helper-functions.html","id":"why-use-gargles-request-helpers","dir":"Articles","previous_headings":"","what":"Why use gargle’s request helpers?","title":"Request helper functions","text":"developer Google-API-wrapping package care request helpers gargle? can write less code safer code, return modest investment studying target API. done ingesting API’s -called Discovery Document. Hundreds Google APIs – ones addressed API Discovery Service – share great deal behaviour. ingesting metadata provided service, can use gargle’s request helpers exploit shared data logic, also decreasing chance users submit ill-formed requests. request helpers gargle check combined inputs user developer suitably prepared API metadata: required parameters missing, error thrown. unrecognized parameters submitted, error thrown. Parameters automatically placed correct location: URL substitution, query, body. something else care ? possible , help concrete requests. Google provides API libraries several languages, including Java, Go, Python, JavaScript, Ruby (R). libraries machine-generated metadata provided API Discovery Service. official recommendation use Discovery Document building client libraries. gargle package aims implement key parts strategy, way also idiomatic R developers.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/request-helper-functions.html","id":"high-level-design-pattern","dir":"Articles","previous_headings":"","what":"High-level design pattern","title":"Request helper functions","text":"gargle facilitates design API-wrapping packages: package exports thin wrapper functions around gargle’s helpers form make HTTP requests, inject package-specific logic data, API key user agent. power users . functions convert user input form required API pass along low-level interface functions. Later, specific examples given, using googledrive package.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/request-helper-functions.html","id":"gargles-http-request-helpers","dir":"Articles","previous_headings":"","what":"gargle’s HTTP request helpers","title":"Request helper functions","text":"gargle provides support creating sending HTTP requests via functions: request_develop(endpoint, params, base_url): .k.. Smart One. Processes info params relative detailed knowledge endpoint, derived API Discovery Document. Checks required unrecognized parameters. Peels params destined body part. Returns request data form anticipates httr::VERB() call horizon. request_build(method, path, params, body, token, key, base_url): .k.. Dumb One. Typically consumes output request_develop(), although required. can called directly enjoy luxuries even making one-API calls absence ingested Discovery Document. Integrates params URL via substitution query string. Sends either API key OAuth token, provides default values logic either. request_make(x, ..., user_agent): actually makes HTTP request. Typically consumes output request_build(), although required. However, enough info form request_make() request, probably just make httr::VERB() call . Consults x$method determine httr::VERB() call, calls rest x, ..., user_agent passed arguments. usually called order, though don’t used way. also fine ignore part gargle use help auth. separate parts package.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/request-helper-functions.html","id":"discovery-documents","dir":"Articles","previous_headings":"","what":"Discovery Documents","title":"Request helper functions","text":"Google’s API Discovery Service “provides lightweight, JSON-based API exposes machine-readable metadata Google APIs”. recommend ingesting metadata R list, stored internal data API-wrapping client package. , HTTP requests inside high-level functions can made concisely safely, referring metadata. combined use data structure gargle’s request helpers can eliminate lot boilerplate data logic shared across Google APIs across endpoints within API. gargle package ships functions scripts facilitate ingest Discovery Document. can find files gargle installation like : Main files interest developer client package: ingest-functions.R collection functions downloading ingesting Discovery Document. drive-example.R uses functions ingest metadata Drive v3 API store internal data object use googledrive. remaining files present analysis Discovery Document Discovery API (meta!) write files useful reference. Several included end vignette. aren’t ingest functions exported gargle? First, regard functionality needed development time, install run time. something ’ll every months, probably associated preparing release wrapper package. Second, packages useful wrangling JSON lists existing dependencies gargle, putting function gargle require unappealing compromises.","code":"ddi_dir <- system.file(\"discovery-doc-ingest\", package = \"gargle\") list.files(ddi_dir) #>  [1] \"api-wide-parameter-names.txt\"    #>  [2] \"api-wide-parameters-humane.txt\"  #>  [3] \"api-wide-parameters.csv\"         #>  [4] \"discover-discovery.R\"            #>  [5] \"drive-example.R\"                 #>  [6] \"ingest-functions.R\"              #>  [7] \"method-properties-humane.txt\"    #>  [8] \"method-properties.csv\"           #>  [9] \"method-property-names.txt\"       #> [10] \"parameter-properties-humane.txt\" #> [11] \"parameter-properties.csv\"        #> [12] \"parameter-property-names.txt\""},{"path":"https://gargle.r-lib.org/dev/articles/request-helper-functions.html","id":"method-or-endpoint-data","dir":"Articles","previous_headings":"","what":"Method (or endpoint) data","title":"Request helper functions","text":"Discovery Document ingest process leaves R list. Let’s assume ’s available package’s namespace internal object named .endpoints. item represents one method API (Google’s vocabulary) endpoint (gargle’s vocabulary). endpoint id. ids also used names list. Examples ids Drive Sheets APIs: Retrieve metadata one endpoint name, e.g.: info can passed along request_develop(endpoint, params, base_url), conducts sanity checks combines external knowledge data coming user developer via params.","code":"drive.about.get drive.files.create drive.teamdrives.list sheets.spreadsheets.create sheets.spreadsheets.values.clear sheets.spreadsheets.sheets.copyTo .endpoints[[\"drive.files.create\"]]"},{"path":"https://gargle.r-lib.org/dev/articles/request-helper-functions.html","id":"design-suggestion-forming-requests","dir":"Articles","previous_headings":"","what":"Design suggestion: forming requests","title":"Request helper functions","text":"’s model used googledrive. low-level request helper, googledrive::request_generate(), used form every request package. exported part low-level API expert use, users never know exists. endpoint argument specifies endpoint name, .k.. id. params processed user input goes. key token refer API key OAuth2 token, respectively. can populated default, possible pass explicitly. package ships default API key, append final fallback value params$key. “borrow” API key gargle another package; always send key associated package provided user. Per Google User Data Policy https://developers.google.com/terms/api-services-user-data-policy, application must accurately represent authenticating Google API services. googledrive::request_generate() takes care everything specific Drive API user’s input task, call gargle::request_develop(). finish preparing request gargle::request_build(), enforces rule always send exactly one key token.","code":"# googledrive:: request_generate <- function(endpoint = character(),                              params = list(),                              key = NULL,                              token = drive_token()) {   ept <- .endpoints[[endpoint]]   if (is.null(ept)) {     stop_glue(\"\\nEndpoint not recognized:\\n  * {endpoint}\")   }    ## modifications specific to googledrive package   params$key <- key %||% params$key %||% drive_api_key()   if (!is.null(ept$parameters$supportsTeamDrives)) {     params$supportsTeamDrives <- TRUE   }    req <- gargle::request_develop(endpoint = ept, params = params)   gargle::request_build(     path = req$path,     method = req$method,     params = req$params,     body = req$body,     token = token   ) }"},{"path":"https://gargle.r-lib.org/dev/articles/request-helper-functions.html","id":"design-suggestion-making-requests","dir":"Articles","previous_headings":"","what":"Design suggestion: making requests","title":"Request helper functions","text":"output gargle::request_build() specifies HTTP request. gargle::request_make() can used actually execute . request_make() consults x$method identify httr::VERB() calls remainder x, ... user_agent. googledrive thin wrapper around injects googledrive user agent:","code":"# gargle:: request_make <- function(x, ..., user_agent = gargle_user_agent()) {   stopifnot(is.character(x$method))   method <- switch(     x$method,     GET    = httr::GET,     POST   = httr::POST,     PATCH  = httr::PATCH,     PUT    = httr::PUT,     DELETE = httr::DELETE,     abort(glue(\"Not a recognized HTTP method: {bt(x$method)}\"))   )   method(     url = x$url,     body = x$body,     x$token,     user_agent,     ...   ) } # googledrive:: request_make <- function(x, ...) {   gargle::request_make(x, ..., user_agent = drive_ua()) }"},{"path":"https://gargle.r-lib.org/dev/articles/request-helper-functions.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"Request helper functions","text":"derived Discovery Document Discovery Service Properties endpoint API-wide endpoint parameters (taken Discovery API , empirically, shared APIs): Properties endpoint parameters:","code":"description             string  Description of this method. etagRequired            boolean Whether this method requires an ETag to be                                 specified. The ETag is sent as an HTTP If-                                 Match or If-None-Match header. httpMethod              string  HTTP method used by this method. id                      string  A unique ID for this method. This property                                 can be used to match methods between                                 different versions of Discovery. mediaUpload             object  Media upload parameters. parameterOrder          array   Ordered list of required parameters, serves                                 as a hint to clients on how to structure                                 their method signatures. The array is ordered                                 such that the \"most-significant\" parameter                                 appears first. parameters              object  Details for all parameters in this method. path                    string  The URI path of this REST method. Should                                 be used in conjunction with the basePath                                 property at the api-level. request                 object  The schema for the request. response                object  The schema for the response. scopes                  array   OAuth 2.0 scopes applicable to this method. supportsMediaDownload   boolean Whether this method supports media downloads. supportsMediaUpload     boolean Whether this method supports media uploads. supportsSubscription    boolean Whether this method supports subscriptions. useMediaDownloadService boolean Indicates that downloads from this method                                 should use the download service URL (i.e.                                 \"/download\"). Only applies if the method                                 supports media download. alt         string  Data format for the response. fields      string  Selector specifying which fields to include                     in a partial response. key         string  API key. Your API key identifies your project                     and provides you with API access, quota, and                     reports. Required unless you provide an OAuth                     2.0 token. oauth_token string  OAuth 2.0 token for the current user. prettyPrint boolean Returns response with indentations and line                     breaks. quotaUser   string  An opaque string that represents a user                     for quota purposes. Must not exceed 40                     characters. userIp      string  Deprecated. Please use quotaUser instead. $ref                 string  A reference to another schema. The value of                              this property is the \"id\" of another schema. additionalProperties NULL    If this is a schema for an object, this                              property is the schema for any additional                              properties with dynamic keys on this object. annotations          object  Additional information about this property. default              string  The default value of this property (if one                              exists). description          string  A description of this object. enum                 array   Values this parameter may take (if it is an                              enum). enumDescriptions     array   The descriptions for the enums. Each position                              maps to the corresponding value in the \"enum\"                              array. format               string  An additional regular expression or key that                              helps constrain the value. For more details                              see: http://tools.ietf.org/html/draft-zyp-                              json-schema-03#section-5.23 id                   string  Unique identifier for this schema. items                NULL    If this is a schema for an array, this                              property is the schema for each element in                              the array. location             string  Whether this parameter goes in the query or                              the path for REST requests. maximum              string  The maximum value of this parameter. minimum              string  The minimum value of this parameter. pattern              string  The regular expression this parameter must                              conform to. Uses Java 6 regex format: http://                              docs.oracle.com/javase/6/docs/api/java/util/                              regex/Pattern.html properties           object  If this is a schema for an object, list the                              schema for each property of this object. readOnly             boolean The value is read-only, generated by the                              service. The value cannot be modified by the                              client. If the value is included in a POST,                              PUT, or PATCH request, it is ignored by the                              service. repeated             boolean Whether this parameter may appear multiple                              times. required             boolean Whether the parameter is required. type                 string  The value type for this schema. A list                              of values can be found here: http://                              tools.ietf.org/html/draft-zyp-json-                              schema-03#section-5.1 variant              object  In a variant data type, the value of                              one property is used to determine how to                              interpret the entire entity. Its value must                              exist in a map of descriminant values to                              schema names."},{"path":"https://gargle.r-lib.org/dev/articles/troubleshooting.html","id":"gargle_verbosity-option","dir":"Articles","previous_headings":"","what":"\"gargle_verbosity\" option","title":"Troubleshooting gargle auth","text":"package-wide option controls gargle’s verbosity: \"gargle_verbosity\". function gargle_verbosity() reveals current value: defaults \"info\", fairly quiet. gargle designed try bunch auth methods (many fail) persist doggedly one succeeds. none succeeds, gargle tries guide user auth , non-interactive session, throws error. need see gory details, set \"gargle_verbosity\" option \"debug\" ’ll get much output gargle works various auth approaches. normal see lots errors, gargle tries various auth methods succession, often fail. Note also withr-style helpers: with_gargle_verbosity() local_gargle_verbosity().","code":"gargle_verbosity() #> [1] \"info\" # save current value op <- options(gargle_verbosity = \"debug\")  gargle_verbosity() #> [1] \"debug\"  # restore original value options(op) gargle_verbosity() #> [1] \"info\"  with_gargle_verbosity(   \"debug\",   gargle_verbosity() ) #> [1] \"debug\"  gargle_verbosity() #> [1] \"info\"  f <- function() {   local_gargle_verbosity(\"debug\")   gargle_verbosity() }  f() #> [1] \"debug\"  gargle_verbosity() #> [1] \"info\""},{"path":"https://gargle.r-lib.org/dev/articles/troubleshooting.html","id":"gargle_oauth_sitrep","dir":"Articles","previous_headings":"","what":"gargle_oauth_sitrep()","title":"Troubleshooting gargle auth","text":"gargle_oauth_sitrep() provides OAuth2 “situation report”. gargle_oauth_sitrep() relevant OAuth2 user tokens. using (struggling use) service account token, workload identity federation, Application Default Credentials, credentials GCE metadata service, gargle_oauth_sitrep() isn’t going help figure ’s going . indicative output gargle_oauth_sitrep(), someone accepted default OAuth cache location played several APIs via gargle-using packages. relatively harmless delete folder serving OAuth cache. , reason believe one specific cached token causing pain, delete specific token (.rds file) cache. OAuth user tokens meant perishable replaceable. choose delete cache (specific token), fallout can expect: need re-auth (usually, meaning browser dance) projects using deleted tokens. .R .Rmd files execute render non-interactively, presumably code PKG_auth(email = \"janedoe@example.com\"), won’t run non-interactively ’ve obtained cached token package identity (email) interactively .","code":"gargle_oauth_sitrep() #' > 14 tokens found in this gargle OAuth cache: #' '~/Library/Caches/gargle' #'  #' email                         app         scope                          hash...    #' ----------------------------- ----------- ------------------------------ ---------- #' abcdefghijklm@gmail.com       thingy      ...bigquery, ...cloud-platform 128f9cc... #' buzzy@example.org             gargle-demo                                15acf95... #' stella@example.org            gargle-demo ...drive                       4281945... #' abcdefghijklm@gmail.com       gargle-demo ...drive                       48e7e76... #' abcdefghijklm@gmail.com       tidyverse                                  69a7353... #' nopqr@ABCDEFG.com             tidyverse   ...spreadsheets.readonly       86a70b9... #' abcdefghijklm@gmail.com       tidyverse   ...drive                       d9443db... #' nopqr@HIJKLMN.com             tidyverse   ...drive                       d9443db... #' nopqr@ABCDEFG.com             tidyverse   ...drive                       d9443db... #' stuvwzyzabcd@gmail.com        tidyverse   ...drive                       d9443db... #' efghijklmnopqrtsuvw@gmail.com tidyverse   ...drive                       d9443db... #' abcdefghijklm@gmail.com       tidyverse   ...drive.readonly              ecd11fa... #' abcdefghijklm@gmail.com       tidyverse   ...bigquery, ...cloud-platform ece63f4... #' nopqr@ABCDEFG.com             tidyverse   ...spreadsheets                f178dd8..."},{"path":"https://gargle.r-lib.org/dev/articles/troubleshooting.html","id":"why-do-good-tokens-go-bad","dir":"Articles","previous_headings":"","what":"Why do good tokens go bad?","title":"Troubleshooting gargle auth","text":"Sometimes feels like auth working suddenly stops working. ’ve cached token used successfully, stop working?","code":""},{"path":"https://gargle.r-lib.org/dev/articles/troubleshooting.html","id":"too-many-tokens","dir":"Articles","previous_headings":"Why do good tokens go bad?","what":"Too many tokens","title":"Troubleshooting gargle auth","text":"existing token can go bad ’ve created many Google tokens, causing oldest tokens “fall edge”. specific Google user (email) can certain number OAuth tokens time (something like 50 per OAuth client). , whenever get new token (opposed refreshing existing token), potential invalidate older token. unlikely issue casual user, can absolutely become noticeable someone developing Google API someone working many different machines / caches. Another reason existing token stops working obtained OAuth client “testing” mode. Refresh tokens obtained way last one week, whereas ’s typical refresh tokens last almost indefinitely (, least, several months).","code":""},{"path":"https://gargle.r-lib.org/dev/articles/troubleshooting.html","id":"credential-rolling","dir":"Articles","previous_headings":"Why do good tokens go bad?","what":"Credential rolling","title":"Troubleshooting gargle auth","text":"Many users packages like googlesheets4 googledrive tacitly rely default OAuth client used packages. Periodically maintainer package need roll client, .e. create new OAuth client disable old one. make impossible refresh existing tokens, made old, disabled client tokens stop working. gargle v1.0.0, March 2021, rolled client used googlesheets4, googledrive, bigrquery. reserve right disable old client time. Anyone relying default client upgrade. solution update package question, e.g. googlesheets4: Restart R! Resume work. Chances ’ll prompted re-auth new client ’ll back business. problem look like wild? gargle versions v1.0.0, probably see : ’re trying create token, instead refreshing one, might see browser, R waiting receive input: might look something like : <img src=“deleted_client.png” alt=“Screenshot following text:”Google”, “Authorization Error”, “Error 401: deleted_client”, “OAuth client deleted.”” width=“400px” /> gargle version v1.1.0, ’re trying harder recognize specific problem provide detailed actionable error message:","code":"install.packages(\"googlesheets4\") Auto-refreshing stale OAuth token. Error in get(\"refresh_oauth2.0\", asNamespace(\"httr\"))(self$endpoint, self$app,  :   Unauthorized (HTTP 401). Google Authorization Error  Error 401: deleted_client The OAuth client was deleted. Auto-refreshing stale OAuth token. Error: Client error: (401) UNAUTHENTICATED   * Request not authenticated due to missing, invalid, or expired OAuth token.   * Request had invalid authentication credentials. Expected OAuth 2 access token, login cookie or other valid authentication credential. See https://developers.google.com/identity/sign-in/web/devconsole-project. Run `rlang::last_error()` to see where the error occurred. In addition: Warning message: Unable to refresh token, because the associated OAuth app has been deleted * You appear to be relying on the default app used by the googlesheets4 package * Consider re-installing googlesheets4 and gargle, in case the default app has been updated"},{"path":"https://gargle.r-lib.org/dev/articles/troubleshooting.html","id":"how-to-avoid-auth-pain","dir":"Articles","previous_headings":"","what":"How to avoid auth pain","title":"Troubleshooting gargle auth","text":"rigged remote mission critical thing (e.g. Shiny app cron job) use cached user OAuth token, one day, one problems described happen mission critical token stop working. thing (e.g. Shiny app cron job) mysteriously fail OAuth token can’t refreshed new token can’t obtained non-interactive setting. cached user tokens poor fit applications. choose use cached user token anyway, prepared deal headache periodically. (may much choice using, example, gmailr package work Gmail API, limited support service accounts.) Consider using OAuth client eliminate exposure third-party deciding roll client. prepared generate fresh token interactively upload token cache consulted remote mission critical thing. Better yet, upgrade robust strategy non-interactive auth, service account token.","code":""},{"path":"https://gargle.r-lib.org/dev/articles/troubleshooting.html","id":"how-to-inspect-the-last-response","dir":"Articles","previous_headings":"","what":"How to inspect the last response","title":"Troubleshooting gargle auth","text":"default, gargle::response_process() stores recently processed response internal environment. can access response nonexported helper gargle:::gargle_last_response(). Prior storage, parts response redacted deleted, access token handle. either sensitive (token) useless (handle) downside upside downstream debugging use. ’s example accessing recent response writing file, shared someone else debugging. response example HTTP status 200, .e. error. process works even case error, e.g. HTTP status >= 400.","code":"library(gargle)  req <- request_build(   method = \"GET\",   path = \"webfonts/v1/webfonts\",   params = list(     sort = \"popularity\"   ),   key = gargle_api_key(),   base_url = \"https://www.googleapis.com\" ) resp <- request_make(req) out <- response_process(resp)  lr <- gargle:::gargle_last_response() tmp <- tempfile(\"gargle-last-response-\") saveRDS(lr, tmp) # you could share this .rds file with a colleague or the gargle maintainer  # how it would look to complete the round trip, i.e. load this on the other end rt_lr <- readRDS(tmp)  all.equal(lr, rt_lr) #> [1] TRUE  # clean up unlink(\"tmp\")"},{"path":"https://gargle.r-lib.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jennifer Bryan. Author, maintainer. Craig Citro. Author. Hadley Wickham. Author. Google Inc. Copyright holder. . Copyright holder, funder.","code":""},{"path":"https://gargle.r-lib.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bryan J, Citro C, Wickham H (2025). gargle: Utilities Working Google APIs. R package version 1.6.0.9000, https://gargle.r-lib.org.","code":"@Manual{,   title = {gargle: Utilities for Working with Google APIs},   author = {Jennifer Bryan and Craig Citro and Hadley Wickham},   year = {2025},   note = {R package version 1.6.0.9000},   url = {https://gargle.r-lib.org}, }"},{"path":"https://gargle.r-lib.org/dev/index.html","id":"gargle","dir":"","previous_headings":"","what":"Utilities for Working with Google APIs","title":"Utilities for Working with Google APIs","text":"goal gargle take agonizing pain working Google APIs. includes functions classes handling common credential types preparing, executing, processing HTTP requests. target user gargle R package author wrapping one ~250 Google APIs listed APIs Explorer. gargle aims play roughly role Google’s official client libraries, R. gargle may also useful useRs making direct calls Google APIs, prepared navigate details low-level API access. gargle’s functionality falls two main domains: covers explicit service accounts, application default credentials, Google Compute Engine, (experimentally) workload identity federation, standard OAuth2 browser flow. gargle offers Gargle2.0 class, extends httr::Token2.0. default class user OAuth 2.0 credentials. two main differences httr::Token2.0: greater emphasis user’s email (e.g. Google identity) default token caching user level. Requests responses. family functions helps prepare HTTP requests, (possibly reference API spec derived Discovery Document), make requests, process response. See articles holistic advice use gargle.","code":""},{"path":"https://gargle.r-lib.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Utilities for Working with Google APIs","text":"can install released version gargle CRAN : development version GitHub :","code":"install.packages(\"gargle\") # install.packages(\"pak\") pak::pak(\"r-lib/gargle\")"},{"path":"https://gargle.r-lib.org/dev/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Utilities for Working with Google APIs","text":"gargle low-level package anything visibly exciting . ’s bit usage interactive scenario user confirms want use specific Google identity loads OAuth2 token. ’s example using request response helpers make one-request Web Fonts Developer API. show popular web font families served Google Fonts. Please note ‘gargle’ project released Contributor Code Conduct. contributing project, agree abide terms. Privacy policy","code":"library(gargle)  token <- token_fetch() #> The gargle package is requesting access to your Google account. #> Enter '1' to start a new auth process or select a pre-authorized account. #> 1: Send me to the browser for a new auth process. #> 2: janedoe_personal@gmail.com #> 3: janedoe@example.com #> Selection: 2  token #> ── <Token (via gargle)> ───────────────────────────────────────────────────── #> oauth_endpoint: google #>            app: gargle-clio #>          email: janedoe_personal@gmail.com #>         scopes: ...userinfo.email #>    credentials: access_token, expires_in, refresh_token, scope, token_type, id_token library(gargle)  req <- request_build(   method = \"GET\",   path = \"webfonts/v1/webfonts\",   params = list(     sort = \"popularity\"   ),   key = gargle_api_key(),   base_url = \"https://www.googleapis.com\" ) resp <- request_make(req) out <- response_process(resp)  out <- out[[\"items\"]][1:8] sort(vapply(out, function(x) x[[\"family\"]], character(1))) #> [1] \"Inter\"          \"Lato\"           \"Material Icons\" \"Montserrat\"     #> [5] \"Noto Sans JP\"   \"Open Sans\"      \"Poppins\"        \"Roboto\""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Authorization state — AuthState-class","title":"Authorization state — AuthState-class","text":"AuthState object manages authorization state, typically behalf wrapper package makes requests Google API. vignette(\"gargle-auth--client-package) describes design wrapper packages relies AuthState object. state can incorporated package's requests tokens can control inclusion tokens requests target API. api_key simplest way associate request specific Google Cloud Platform project. calls certain APIs, e.g. reading public Sheet, can succeed API key, exception. client OAuth client ID (secret) associated specific Google Cloud Platform project. used OAuth flow, authenticated user authorizes client access manipulate data behalf. auth_active reflects whether outgoing requests authorized authenticated user unauthorized requests public resources. two states correspond sending request token versus API key, respectively. cred current token cached within session, one fetched. generally assumed instance httr::TokenServiceAccount httr::Token2.0 (subclass thereof), probably obtained via token_fetch() (one constituent credential fetching functions). AuthState created constructor function init_AuthState(), details arguments.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Authorization state — AuthState-class","text":"package Package name. client OAuth client. app Use client instead. api_key API key. auth_active Logical, indicating whether auth active. cred Credentials.","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Authorization state — AuthState-class","text":"AuthState$new() AuthState$format() AuthState$set_client() AuthState$set_app() AuthState$set_api_key() AuthState$set_auth_active() AuthState$set_cred() AuthState$clear_cred() AuthState$get_cred() AuthState$has_cred() AuthState$clone()","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Authorization state — AuthState-class","text":"Create new AuthState","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization state — AuthState-class","text":"","code":"AuthState$new(   package = NA_character_,   client = NULL,   api_key = NULL,   auth_active = TRUE,   cred = NULL,   app = deprecated() )"},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorization state — AuthState-class","text":"package Package name. client OAuth client. api_key API key. auth_active Logical, indicating whether auth active. cred Credentials. app Use client instead.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Authorization state — AuthState-class","text":"details parameters, see init_AuthState()","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Authorization state — AuthState-class","text":"Format AuthState","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization state — AuthState-class","text":"","code":"AuthState$format(...)"},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorization state — AuthState-class","text":"... used.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"method-set-client-","dir":"Reference","previous_headings":"","what":"Method set_client()","title":"Authorization state — AuthState-class","text":"Set OAuth client","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization state — AuthState-class","text":"","code":"AuthState$set_client(client)"},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorization state — AuthState-class","text":"client OAuth client.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"method-set-app-","dir":"Reference","previous_headings":"","what":"Method set_app()","title":"Authorization state — AuthState-class","text":"Deprecated method set OAuth client","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization state — AuthState-class","text":"","code":"AuthState$set_app(app)"},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorization state — AuthState-class","text":"app Use client instead.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"method-set-api-key-","dir":"Reference","previous_headings":"","what":"Method set_api_key()","title":"Authorization state — AuthState-class","text":"Set API key","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization state — AuthState-class","text":"","code":"AuthState$set_api_key(value)"},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorization state — AuthState-class","text":"value API key.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"method-set-auth-active-","dir":"Reference","previous_headings":"","what":"Method set_auth_active()","title":"Authorization state — AuthState-class","text":"Set whether auth ()active","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization state — AuthState-class","text":"","code":"AuthState$set_auth_active(value)"},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorization state — AuthState-class","text":"value Logical, indicating whether send requests authorized user credentials.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"method-set-cred-","dir":"Reference","previous_headings":"","what":"Method set_cred()","title":"Authorization state — AuthState-class","text":"Set credentials","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization state — AuthState-class","text":"","code":"AuthState$set_cred(cred)"},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorization state — AuthState-class","text":"cred User credentials.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"method-clear-cred-","dir":"Reference","previous_headings":"","what":"Method clear_cred()","title":"Authorization state — AuthState-class","text":"Clear credentials","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization state — AuthState-class","text":"","code":"AuthState$clear_cred()"},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"method-get-cred-","dir":"Reference","previous_headings":"","what":"Method get_cred()","title":"Authorization state — AuthState-class","text":"Get credentials","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization state — AuthState-class","text":"","code":"AuthState$get_cred()"},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"method-has-cred-","dir":"Reference","previous_headings":"","what":"Method has_cred()","title":"Authorization state — AuthState-class","text":"Report credentials","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization state — AuthState-class","text":"","code":"AuthState$has_cred()"},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Authorization state — AuthState-class","text":"objects class cloneable method.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization state — AuthState-class","text":"","code":"AuthState$clone(deep = FALSE)"},{"path":"https://gargle.r-lib.org/dev/reference/AuthState-class.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorization state — AuthState-class","text":"deep Whether make deep clone.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth2 token objects specific to Google APIs — Gargle-class","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"Gargle2.0 based Token2.0 class provided httr. preferred way create Gargle2.0 token constructor function gargle2.0_token(). Key differences Token2.0: key cached Token2.0 comes hashing endpoint, client, scopes. Gargle2.0 subclass, identifier key expanded include email address associated token. makes easier work Google APIs multiple identities. Gargle2.0 tokens cached, default, user level, following XDG spec storing user-specific data cache files. contrast, default location Token2.0 ./.httr-oauth, .e. current working directory. Gargle2.0 behaviour makes easier reuse tokens across projects makes less likely tokens accidentally synced remote location like GitHub DropBox. Gargle2.0 token cached file. token cache directory files. contrast, Token2.0 tokens cached components list, typically serialized ./.httr-oauth.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"httr::Token -> httr::Token2.0 -> Gargle2.0","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"email Email associated token. package Name package requesting token. Used messages. client OAuth client.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"httr::Token2.0$can_refresh() httr::Token2.0$revoke() httr::Token2.0$sign() httr::Token2.0$validate()","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"Gargle2.0$new() Gargle2.0$format() Gargle2.0$print() Gargle2.0$hash() Gargle2.0$cache() Gargle2.0$load_from_cache() Gargle2.0$refresh() Gargle2.0$init_credentials() Gargle2.0$clone()","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"Create Gargle2.0 token","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"","code":"Gargle2.0$new(   email = gargle_oauth_email(),   client = gargle_client(),   package = \"gargle\",   credentials = NULL,   params = list(),   cache_path = gargle_oauth_cache(),   app = deprecated() )"},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"email Optional email address. See gargle2.0_token() full details. client OAuth consumer application. package Name package requesting token. Used messages. credentials Exists largely testing purposes. params list parameters internal function init_oauth2.0(), modified version httr::init_oauth2.0(). gargle actively uses scope use_oob, use user_params, type, as_header (hard-wired TRUE), use_basic_auth (accept default use_basic_auth = FALSE), config_init, client_credentials. cache_path Specifies OAuth token cache. Read gargle_oauth_cache(). app Use client instead.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"Gargle2.0 token.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"Format Gargle2.0 token","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"","code":"Gargle2.0$format(...)"},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"... used.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"Print Gargle2.0 token","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"","code":"Gargle2.0$print(...)"},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"... used.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"method-hash-","dir":"Reference","previous_headings":"","what":"Method hash()","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"Generate email-augmented hash Gargle2.0 token","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"","code":"Gargle2.0$hash()"},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"method-cache-","dir":"Reference","previous_headings":"","what":"Method cache()","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"Put Gargle2.0 token cache","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"","code":"Gargle2.0$cache()"},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"method-load-from-cache-","dir":"Reference","previous_headings":"","what":"Method load_from_cache()","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"(Attempt ) get Gargle2.0 token cache","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"","code":"Gargle2.0$load_from_cache()"},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"method-refresh-","dir":"Reference","previous_headings":"","what":"Method refresh()","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"(Attempt ) refresh Gargle2.0 token","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"","code":"Gargle2.0$refresh()"},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"method-init-credentials-","dir":"Reference","previous_headings":"","what":"Method init_credentials()","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"Initiate new Gargle2.0 token","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"","code":"Gargle2.0$init_credentials()"},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"objects class cloneable method.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"","code":"Gargle2.0$clone(deep = FALSE)"},{"path":"https://gargle.r-lib.org/dev/reference/Gargle-class.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth2 token objects specific to Google APIs — Gargle-class","text":"deep Whether make deep clone.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":null,"dir":"Reference","previous_headings":"","what":"Token for use on Google Compute Engine instances — GceToken","title":"Token for use on Google Compute Engine instances — GceToken","text":"Token use Google Compute Engine instances Token use Google Compute Engine instances","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Token for use on Google Compute Engine instances — GceToken","text":"class uses metadata service available GCE VMs fetch access tokens. intended direct use. See credentials_gce() instead.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Token for use on Google Compute Engine instances — GceToken","text":"httr::Token -> httr::Token2.0 -> GceToken","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Token for use on Google Compute Engine instances — GceToken","text":"httr::Token$hash() httr::Token2.0$sign()","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Token for use on Google Compute Engine instances — GceToken","text":"GceToken$new() GceToken$init_credentials() GceToken$refresh() GceToken$can_refresh() GceToken$format() GceToken$print() GceToken$cache() GceToken$load_from_cache() GceToken$revoke() GceToken$validate() GceToken$clone()","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Token for use on Google Compute Engine instances — GceToken","text":"Get access GCE service account.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use on Google Compute Engine instances — GceToken","text":"","code":"GceToken$new(params)"},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Token for use on Google Compute Engine instances — GceToken","text":"params list parameters fetch_gce_access_token().","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Token for use on Google Compute Engine instances — GceToken","text":"GceToken.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"method-init-credentials-","dir":"Reference","previous_headings":"","what":"Method init_credentials()","title":"Token for use on Google Compute Engine instances — GceToken","text":"Request access token.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use on Google Compute Engine instances — GceToken","text":"","code":"GceToken$init_credentials()"},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"method-refresh-","dir":"Reference","previous_headings":"","what":"Method refresh()","title":"Token for use on Google Compute Engine instances — GceToken","text":"Refreshes token. case, just means \"ask access token\".","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use on Google Compute Engine instances — GceToken","text":"","code":"GceToken$refresh()"},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"method-can-refresh-","dir":"Reference","previous_headings":"","what":"Method can_refresh()","title":"Token for use on Google Compute Engine instances — GceToken","text":"Placeholder implementation required method. Returns TRUE.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use on Google Compute Engine instances — GceToken","text":"","code":"GceToken$can_refresh()"},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Token for use on Google Compute Engine instances — GceToken","text":"Format GceToken().","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use on Google Compute Engine instances — GceToken","text":"","code":"GceToken$format(...)"},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Token for use on Google Compute Engine instances — GceToken","text":"... used.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Token for use on Google Compute Engine instances — GceToken","text":"Print GceToken().","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use on Google Compute Engine instances — GceToken","text":"","code":"GceToken$print(...)"},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Token for use on Google Compute Engine instances — GceToken","text":"... used.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"method-cache-","dir":"Reference","previous_headings":"","what":"Method cache()","title":"Token for use on Google Compute Engine instances — GceToken","text":"Placeholder implementation required method.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use on Google Compute Engine instances — GceToken","text":"","code":"GceToken$cache()"},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"method-load-from-cache-","dir":"Reference","previous_headings":"","what":"Method load_from_cache()","title":"Token for use on Google Compute Engine instances — GceToken","text":"Placeholder implementation required method.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use on Google Compute Engine instances — GceToken","text":"","code":"GceToken$load_from_cache()"},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"method-revoke-","dir":"Reference","previous_headings":"","what":"Method revoke()","title":"Token for use on Google Compute Engine instances — GceToken","text":"Placeholder implementation required method.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use on Google Compute Engine instances — GceToken","text":"","code":"GceToken$revoke()"},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"Token for use on Google Compute Engine instances — GceToken","text":"Placeholder implementation required method","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use on Google Compute Engine instances — GceToken","text":"","code":"GceToken$validate()"},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Token for use on Google Compute Engine instances — GceToken","text":"objects class cloneable method.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use on Google Compute Engine instances — GceToken","text":"","code":"GceToken$clone(deep = FALSE)"},{"path":"https://gargle.r-lib.org/dev/reference/GceToken.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Token for use on Google Compute Engine instances — GceToken","text":"deep Whether make deep clone.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":null,"dir":"Reference","previous_headings":"","what":"Token for use with workload identity federation — WifToken","title":"Token for use with workload identity federation — WifToken","text":"Token use workload identity federation Token use workload identity federation","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Token for use with workload identity federation — WifToken","text":"intended direct use. See credentials_external_account() instead.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Token for use with workload identity federation — WifToken","text":"httr::Token -> httr::Token2.0 -> WifToken","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Token for use with workload identity federation — WifToken","text":"httr::Token$hash() httr::Token2.0$sign()","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Token for use with workload identity federation — WifToken","text":"WifToken$new() WifToken$init_credentials() WifToken$refresh() WifToken$format() WifToken$print() WifToken$can_refresh() WifToken$cache() WifToken$load_from_cache() WifToken$validate() WifToken$revoke() WifToken$clone()","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Token for use with workload identity federation — WifToken","text":"Get token via workload identity federation","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use with workload identity federation — WifToken","text":"","code":"WifToken$new(params = list())"},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Token for use with workload identity federation — WifToken","text":"params list parameters init_oauth_external_account().","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Token for use with workload identity federation — WifToken","text":"WifToken.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"method-init-credentials-","dir":"Reference","previous_headings":"","what":"Method init_credentials()","title":"Token for use with workload identity federation — WifToken","text":"Enact actual token exchange workload identity federation.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use with workload identity federation — WifToken","text":"","code":"WifToken$init_credentials()"},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"method-refresh-","dir":"Reference","previous_headings":"","what":"Method refresh()","title":"Token for use with workload identity federation — WifToken","text":"Refreshes token, means re-entire token flow case.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use with workload identity federation — WifToken","text":"","code":"WifToken$refresh()"},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Token for use with workload identity federation — WifToken","text":"Format WifToken().","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use with workload identity federation — WifToken","text":"","code":"WifToken$format(...)"},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Token for use with workload identity federation — WifToken","text":"... used.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Token for use with workload identity federation — WifToken","text":"Print WifToken().","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use with workload identity federation — WifToken","text":"","code":"WifToken$print(...)"},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Token for use with workload identity federation — WifToken","text":"... used.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"method-can-refresh-","dir":"Reference","previous_headings":"","what":"Method can_refresh()","title":"Token for use with workload identity federation — WifToken","text":"Placeholder implementation required method. Returns TRUE.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use with workload identity federation — WifToken","text":"","code":"WifToken$can_refresh()"},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"method-cache-","dir":"Reference","previous_headings":"","what":"Method cache()","title":"Token for use with workload identity federation — WifToken","text":"Placeholder implementation required method. Returns self.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use with workload identity federation — WifToken","text":"","code":"WifToken$cache()"},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"method-load-from-cache-","dir":"Reference","previous_headings":"","what":"Method load_from_cache()","title":"Token for use with workload identity federation — WifToken","text":"Placeholder implementation required method. Returns self.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use with workload identity federation — WifToken","text":"","code":"WifToken$load_from_cache()"},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"Token for use with workload identity federation — WifToken","text":"Placeholder implementation required method.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use with workload identity federation — WifToken","text":"","code":"WifToken$validate()"},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"method-revoke-","dir":"Reference","previous_headings":"","what":"Method revoke()","title":"Token for use with workload identity federation — WifToken","text":"Placeholder implementation required method.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use with workload identity federation — WifToken","text":"","code":"WifToken$revoke()"},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Token for use with workload identity federation — WifToken","text":"objects class cloneable method.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Token for use with workload identity federation — WifToken","text":"","code":"WifToken$clone(deep = FALSE)"},{"path":"https://gargle.r-lib.org/dev/reference/WifToken.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Token for use with workload identity federation — WifToken","text":"deep Whether make deep clone.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/bulletize.html","id":null,"dir":"Reference","previous_headings":"","what":"Abbreviate a bullet list neatly — bulletize","title":"Abbreviate a bullet list neatly — bulletize","text":"internal use gargle, googledrive, googlesheets4 (now).","code":""},{"path":"https://gargle.r-lib.org/dev/reference/bulletize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abbreviate a bullet list neatly — bulletize","text":"","code":"bulletize(x, bullet = \"*\", n_show = 5, n_fudge = 2)"},{"path":"https://gargle.r-lib.org/dev/reference/check_is_service_account.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for a service account — check_is_service_account","title":"Check for a service account — check_is_service_account","text":"pre-checks information provided high-level, user-facing auth function, googledrive::drive_auth(), passing user's input along token_fetch(), designed silently swallow errors. users confused difference OAuth client service account provide (path ) JSON one, actually expected.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/check_is_service_account.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for a service account — check_is_service_account","text":"","code":"check_is_service_account(path, hint, call = caller_env())"},{"path":"https://gargle.r-lib.org/dev/reference/check_is_service_account.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for a service account — check_is_service_account","text":"path JSON identifying service account, one forms supported txt argument jsonlite::fromJSON() (typically, file path JSON string). hint relevant function call configuring OAuth client. call execution environment currently running function, e.g. call = caller_env(). corresponding function call retrieved mentioned error messages source error. need supply call throwing condition helper function relevant mention message. Can also NULL defused function call respectively display call hard-code code display. information error calls, see Including function calls error messages.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/check_is_service_account.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for a service account — check_is_service_account","text":"Nothing. Exists purely throw error.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/cred_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"Credential function registry — cred_funs","title":"Credential function registry — cred_funs","text":"Functions query manipulate registry credential functions consulted token_fetch().","code":""},{"path":"https://gargle.r-lib.org/dev/reference/cred_funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Credential function registry — cred_funs","text":"","code":"cred_funs_list()  cred_funs_add(...)  cred_funs_set(funs, ls = deprecated())  cred_funs_clear()  cred_funs_list_default()  cred_funs_set_default()  local_cred_funs(   funs = cred_funs_list_default(),   action = c(\"replace\", \"modify\"),   .local_envir = caller_env() )  with_cred_funs(   funs = cred_funs_list_default(),   code,   action = c(\"replace\", \"modify\") )"},{"path":"https://gargle.r-lib.org/dev/reference/cred_funs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Credential function registry — cred_funs","text":"... <dynamic-dots> One credential functions, name = value form. credential function subject superficial check least \"smells like\" credential function: first argument must named scopes, signature must include .... remove credential function, can use specification like name = NULL. funs named list credential functions. ls argument renamed funs. action Whether use funs replace modify registry funs: \"replace\" cred_funs_set(funs) \"modify\" cred_funs_add(!!!funs) .local_envir environment use scoping. Defaults current execution environment. code Code run temporary credential function registry.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/cred_funs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Credential function registry — cred_funs","text":"list credential functions NULL.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/cred_funs.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Credential function registry — cred_funs","text":"cred_funs_list(): Get list registered credential functions. cred_funs_add(): Register one new credential fetching functions. Function(s) added front list. : \"First registered, last tried.\" \"Last registered, first tried.\" Can also used remove function registry. cred_funs_set(): Register list credential fetching functions. cred_funs_clear(): Clear credential function registry. cred_funs_list_default(): Return default list credential functions. cred_funs_set_default(): Reset registry gargle default. local_cred_funs(): Modify credential function registry current scope. example local_*() functions withr. with_cred_funs(): Evaluate code temporarily modified credential function registry. example with_*() functions withr.","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/reference/cred_funs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Credential function registry — cred_funs","text":"","code":"names(cred_funs_list()) #> [1] \"credentials_byo_oauth2\"       \"credentials_service_account\"  #> [3] \"credentials_external_account\" \"credentials_app_default\"      #> [5] \"credentials_gce\"              \"credentials_user_oauth2\"       creds_one <- function(scopes, ...) {}  cred_funs_add(one = creds_one) cred_funs_add(two = creds_one, three = creds_one) names(cred_funs_list()) #> [1] \"three\"                        \"two\"                          #> [3] \"one\"                          \"credentials_byo_oauth2\"       #> [5] \"credentials_service_account\"  \"credentials_external_account\" #> [7] \"credentials_app_default\"      \"credentials_gce\"              #> [9] \"credentials_user_oauth2\"       cred_funs_add(two = NULL) names(cred_funs_list()) #> [1] \"three\"                        \"one\"                          #> [3] \"credentials_byo_oauth2\"       \"credentials_service_account\"  #> [5] \"credentials_external_account\" \"credentials_app_default\"      #> [7] \"credentials_gce\"              \"credentials_user_oauth2\"       # restore the default list cred_funs_set_default()  # remove one specific credential fetcher cred_funs_add(credentials_gce = NULL) names(cred_funs_list()) #> [1] \"credentials_byo_oauth2\"       \"credentials_service_account\"  #> [3] \"credentials_external_account\" \"credentials_app_default\"      #> [5] \"credentials_user_oauth2\"       # force the use of one specific credential fetcher cred_funs_set(list(credentials_user_oauth2 = credentials_user_oauth2)) names(cred_funs_list()) #> [1] \"credentials_user_oauth2\"  # restore the default list cred_funs_set_default()  # run some code with a temporary change to the registry # creds_one ONLY with_cred_funs(   list(one = creds_one),   names(cred_funs_list()) ) #> [1] \"one\" # add creds_one to the list with_cred_funs(   list(one = creds_one),   names(cred_funs_list()),   action = \"modify\" ) #> [1] \"one\"                          \"credentials_byo_oauth2\"       #> [3] \"credentials_service_account\"  \"credentials_external_account\" #> [5] \"credentials_app_default\"      \"credentials_gce\"              #> [7] \"credentials_user_oauth2\"      # remove credentials_gce with_cred_funs(   list(credentials_gce = NULL),   names(cred_funs_list()),   action = \"modify\" ) #> [1] \"credentials_byo_oauth2\"       \"credentials_service_account\"  #> [3] \"credentials_external_account\" \"credentials_app_default\"      #> [5] \"credentials_user_oauth2\""},{"path":"https://gargle.r-lib.org/dev/reference/credentials_app_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Application Default Credentials — credentials_app_default","title":"Load Application Default Credentials — credentials_app_default","text":"Loads credentials file identified via search strategy known Application Default Credentials (ADC). hope make auth \"just work\" someone working Google-provided infrastructure used Google tooling get started, gcloud command line tool. sequence paths consulted, describe , abuse notation. ALL_CAPS represents value environment variable %||% used spirit null coalescing operator.   search successfully identifies JSON file, parsed ingested service account, external account (\"workload identity federation\"), user account. Literally, JSON describes service account, call credentials_service_account() describes external account, call credentials_external_account().","code":"GOOGLE_APPLICATION_CREDENTIALS CLOUDSDK_CONFIG/application_default_credentials.json # on Windows: (APPDATA %||% SystemDrive %||% C:)\\gcloud\\application_default_credentials.json # on not-Windows: ~/.config/gcloud/application_default_credentials.json"},{"path":"https://gargle.r-lib.org/dev/reference/credentials_app_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Application Default Credentials — credentials_app_default","text":"","code":"credentials_app_default(scopes = NULL, ..., subject = NULL)"},{"path":"https://gargle.r-lib.org/dev/reference/credentials_app_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Application Default Credentials — credentials_app_default","text":"scopes character vector scopes request. Pick listed https://developers.google.com/identity/protocols/oauth2/scopes. certain token flows, \"https://www.googleapis.com/auth/userinfo.email\" scope unconditionally included. grants permission retrieve email address associated token; gargle uses index cached OAuth tokens. grants permission view send email generally considered low-value scope. ... Additional arguments passed credential functions. subject optional subject claim. Specify wish use service account represented path impersonate subject, normal user. can work, administrator must grant service account domain-wide authority. Identify user impersonate via email, e.g. subject = \"user@example.com\". Note gargle automatically adds non-sensitive \"https://www.googleapis.com/auth/userinfo.email\" scope, scope must enabled service account, along scopes requested.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/credentials_app_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Application Default Credentials — credentials_app_default","text":"httr::TokenServiceAccount, WifToken, httr::Token2.0 NULL.","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/reference/credentials_app_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Application Default Credentials — credentials_app_default","text":"","code":"if (FALSE) { # \\dontrun{ credentials_app_default() } # }"},{"path":"https://gargle.r-lib.org/dev/reference/credentials_byo_oauth2.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a user-provided token — credentials_byo_oauth2","title":"Load a user-provided token — credentials_byo_oauth2","text":"function designed pass token input , checks light processing: token class request, .e. token prepared httr::config(), auth_token component extracted. example, input returned googledrive::drive_token() bigrquery::bq_token(). token instance Gargle2.0 (: gargle-obtained user token), checks appears Google OAuth token, based embedded oauth_endpoint. Refreshes token, refreshable. Returns token. point providing scopes. ignored scopes associated token already baked token gargle support incremental authorization. main point credentials_byo_oauth2() allow token_fetch() (packages wrap ) accommodate \"bring token\" workflow. also makes possible obtain token one package register use another package. example, default scope requested googledrive also sufficient operations available googlesheets4. use shared token like :","code":"library(googledrive) library(googlesheets4) drive_auth(email = \"jane_doe@example.com\") gs4_auth(token = drive_token()) # work with both packages freely now, with the same identity"},{"path":"https://gargle.r-lib.org/dev/reference/credentials_byo_oauth2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a user-provided token — credentials_byo_oauth2","text":"","code":"credentials_byo_oauth2(scopes = NULL, token, ...)"},{"path":"https://gargle.r-lib.org/dev/reference/credentials_byo_oauth2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a user-provided token — credentials_byo_oauth2","text":"scopes character vector scopes request. Pick listed https://developers.google.com/identity/protocols/oauth2/scopes. certain token flows, \"https://www.googleapis.com/auth/userinfo.email\" scope unconditionally included. grants permission retrieve email address associated token; gargle uses index cached OAuth tokens. grants permission view send email generally considered low-value scope. token token class Token2.0 object httr's class request, .e. token prepared httr::config() Token2.0 auth_token component. ... Additional arguments passed credential functions.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/credentials_byo_oauth2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a user-provided token — credentials_byo_oauth2","text":"Token2.0.","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/reference/credentials_byo_oauth2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a user-provided token — credentials_byo_oauth2","text":"","code":"if (FALSE) { # \\dontrun{ # assume `my_token` is a Token2.0 object returned by a function such as # credentials_user_oauth2() credentials_byo_oauth2(token = my_token) } # }"},{"path":"https://gargle.r-lib.org/dev/reference/credentials_external_account.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a token for an external account — credentials_external_account","title":"Get a token for an external account — credentials_external_account","text":"Workload identity federation new (April 2021) keyless authentication mechanism allows applications running non-Google Cloud platform, AWS, access Google Cloud resources without using conventional service account token. eliminates dilemma safely manage service account credential files. Unlike service accounts, configuration file workload identity federation contains secrets. Instead, holds non-sensitive metadata. external application obtains needed sensitive data \"--fly\" running instance. combined data used obtain -called subject token external identity provider, AWS. sent Google's Security Token Service API, exchange short-lived federated access token. Finally, federated access token sent Google's Service Account Credentials API, exchange short-lived GCP access token. access token allows external application impersonate service account inherit permissions service account access GCP resources. feature still experimental gargle currently supports AWS. also requires installation suggested packages aws.signature aws.ec2metadata. Workload identity federation can used platforms, Microsoft Azure identity provider supports OpenID Connect. like gargle support token flow additional platforms, please open issue GitHub describe use case.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/credentials_external_account.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a token for an external account — credentials_external_account","text":"","code":"credentials_external_account(   scopes = \"https://www.googleapis.com/auth/cloud-platform\",   path = \"\",   ... )"},{"path":"https://gargle.r-lib.org/dev/reference/credentials_external_account.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a token for an external account — credentials_external_account","text":"scopes character vector scopes request. Pick listed https://developers.google.com/identity/protocols/oauth2/scopes. certain token flows, \"https://www.googleapis.com/auth/userinfo.email\" scope unconditionally included. grants permission retrieve email address associated token; gargle uses index cached OAuth tokens. grants permission view send email generally considered low-value scope. path JSON containing workload identity configuration external account, one forms supported txt argument jsonlite::fromJSON() (probably, file path, although JSON string). instructions generating configuration given Configuring workload identity federation. Note external account tokens natural fit use Application Default Credentials, consider storing configuration file one standard locations consulted ADC, instead providing path explicitly. See credentials_app_default() . ... Additional arguments passed credential functions.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/credentials_external_account.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a token for an external account — credentials_external_account","text":"WifToken() NULL.","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/reference/credentials_external_account.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a token for an external account — credentials_external_account","text":"","code":"if (FALSE) { # \\dontrun{ credentials_external_account() } # }"},{"path":"https://gargle.r-lib.org/dev/reference/credentials_gce.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a token from the Google metadata server — credentials_gce","title":"Get a token from the Google metadata server — credentials_gce","text":"code running Google Cloud, can often obtain token attached service account directly metadata server. secure working explicit service account key, credentials_service_account() , preferred method auth workloads running Google Cloud. straightforward scenario working VM Google Compute Engine OK use default service account. \"just work\" automatically. credentials_gce() supports use cases (GKE Workload Identity), may require explicit setup, : Create service account, grant appropriate scopes(s) IAM roles, attach target resource. prep work happens outside R, e.g., Google Cloud Console. R side, provide email address appropriately configured service account via service_account. Specify details constructing root URL metadata service: logical option \"gargle.gce.use_ip\". undefined, defaults FALSE. environment variable GCE_METADATA_URL consulted \"gargle.gce.use_ip\" FALSE. undefined, default metadata.google.internal. environment variable GCE_METADATA_IP consulted \"gargle.gce.use_ip\" TRUE. undefined, default 169.254.169.254. Change (presumably increase) timeout requests metadata server via \"gargle.gce.timeout\" global option. timeout given seconds set value (strategy, really) often works well practice. However, cases may necessary increase timeout code :   details specific use cases, Google Kubernetes Engine (GKE), see vignette(\"non-interactive-auth\").","code":"options(gargle.gce.timeout = 3)"},{"path":"https://gargle.r-lib.org/dev/reference/credentials_gce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a token from the Google metadata server — credentials_gce","text":"","code":"credentials_gce(   scopes = \"https://www.googleapis.com/auth/cloud-platform\",   service_account = \"default\",   ... )"},{"path":"https://gargle.r-lib.org/dev/reference/credentials_gce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a token from the Google metadata server — credentials_gce","text":"scopes character vector scopes request. Pick listed https://developers.google.com/identity/protocols/oauth2/scopes. certain token flows, \"https://www.googleapis.com/auth/userinfo.email\" scope unconditionally included. grants permission retrieve email address associated token; gargle uses index cached OAuth tokens. grants permission view send email generally considered low-value scope. service_account Name GCE service account use. ... Additional arguments passed credential functions.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/credentials_gce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a token from the Google metadata server — credentials_gce","text":"GceToken() NULL.","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/reference/credentials_gce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a token from the Google metadata server — credentials_gce","text":"","code":"if (FALSE) { # \\dontrun{ credentials_gce() } # }"},{"path":"https://gargle.r-lib.org/dev/reference/credentials_service_account.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a service account token — credentials_service_account","title":"Load a service account token — credentials_service_account","text":"Load service account token","code":""},{"path":"https://gargle.r-lib.org/dev/reference/credentials_service_account.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a service account token — credentials_service_account","text":"","code":"credentials_service_account(scopes = NULL, path = \"\", ..., subject = NULL)"},{"path":"https://gargle.r-lib.org/dev/reference/credentials_service_account.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a service account token — credentials_service_account","text":"scopes character vector scopes request. Pick listed https://developers.google.com/identity/protocols/oauth2/scopes. certain token flows, \"https://www.googleapis.com/auth/userinfo.email\" scope unconditionally included. grants permission retrieve email address associated token; gargle uses index cached OAuth tokens. grants permission view send email generally considered low-value scope. path JSON identifying service account, one forms supported txt argument jsonlite::fromJSON() (typically, file path JSON string). ... Additional arguments passed credential functions. subject optional subject claim. Specify wish use service account represented path impersonate subject, normal user. can work, administrator must grant service account domain-wide authority. Identify user impersonate via email, e.g. subject = \"user@example.com\". Note gargle automatically adds non-sensitive \"https://www.googleapis.com/auth/userinfo.email\" scope, scope must enabled service account, along scopes requested.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/credentials_service_account.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a service account token — credentials_service_account","text":"httr::TokenServiceAccount NULL.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/credentials_service_account.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load a service account token — credentials_service_account","text":"Note fetching token service account requires reasonably accurate system clock. information, see vignette(\"-gargle-gets-tokens\").","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/reference/credentials_service_account.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a service account token — credentials_service_account","text":"","code":"if (FALSE) { # \\dontrun{ token <- credentials_service_account(   scopes = \"https://www.googleapis.com/auth/userinfo.email\",   path = \"/path/to/your/service-account.json\" ) } # }"},{"path":"https://gargle.r-lib.org/dev/reference/credentials_user_oauth2.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an OAuth token for a user — credentials_user_oauth2","title":"Get an OAuth token for a user — credentials_user_oauth2","text":"Consults token cache suitable OAuth token , unsuccessful, gets token via browser flow. cached token suitable compatible user's request sense: OAuth client must . Scopes must . Email, provided, must . specified email glob pattern like \"*@example.com\", email matching done domain level. gargle conservative using OAuth tokens discovered user's cache generally seek interactive confirmation. Therefore, non-interactive setting, important explicitly specify \"email\" target account explicitly authorize automatic discovery. See gargle2.0_token(), function wraps, . Non-interactive use also suggests might time use service account token workload identity federation.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/credentials_user_oauth2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an OAuth token for a user — credentials_user_oauth2","text":"","code":"credentials_user_oauth2(   scopes = NULL,   client = gargle_client(),   package = \"gargle\",   ...,   app = deprecated() )"},{"path":"https://gargle.r-lib.org/dev/reference/credentials_user_oauth2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an OAuth token for a user — credentials_user_oauth2","text":"scopes character vector scopes request. Pick listed https://developers.google.com/identity/protocols/oauth2/scopes. certain token flows, \"https://www.googleapis.com/auth/userinfo.email\" scope unconditionally included. grants permission retrieve email address associated token; gargle uses index cached OAuth tokens. grants permission view send email generally considered low-value scope. client Google OAuth client, preferably constructed via gargle_oauth_client_from_json(), returns instance gargle_oauth_client. backwards compatibility, limited time, gargle still accept \"OAuth app\" created httr::oauth_app(). package Name package requesting token. Used messages. ... Arguments passed gargle2.0_token email Optional. specified, email can take several different forms: \"jane@gmail.com\", .e. actual email address. allows user target specific Google identity. specified, used token lookup, .e. determine suitable token already available cache. token found, email used pre-select targeted Google identity OAuth chooser. (Note, however, email associated token cached always determined token , never argument). \"*@example.com\", .e. domain-glob pattern. can helpful need code \"just works\" alice@example.com bob@example.com. TRUE means approving email auto-discovery. exactly one matching token found cache, used. FALSE NA mean want ignore token cache force new OAuth dance browser. Defaults option named \"gargle_oauth_email\", retrieved gargle_oauth_email() (unless wrapper package implements different default behavior). use_oob Whether use --band authentication (, perhaps, variant implemented gargle known \"pseudo-OOB\") first acquiring token. Defaults value returned gargle_oob_default(). Note (pseudo-)OOB auth affects initial OAuth dance. retrieve (possibly refresh) cached token, use_oob effect. OAuth client provided implicitly wrapper package, type probably defaults value returned gargle_oauth_client_type(). can take control client type setting options(gargle_oauth_client_type = \"web\") options(gargle_oauth_client_type = \"installed\"). cache Specifies OAuth token cache. Defaults option named \"gargle_oauth_cache\", retrieved via gargle_oauth_cache(). credentials Advanced use : allows completely customise token generation. app Replaced client argument.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/credentials_user_oauth2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an OAuth token for a user — credentials_user_oauth2","text":"Gargle2.0 token.","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/reference/credentials_user_oauth2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an OAuth token for a user — credentials_user_oauth2","text":"","code":"if (FALSE) { # \\dontrun{ # Drive scope, built-in gargle demo client scopes <- \"https://www.googleapis.com/auth/drive\" credentials_user_oauth2(scopes, client = gargle_client())  # bring your own client client <- gargle_oauth_client_from_json(   path = \"/path/to/the/JSON/you/downloaded/from/gcp/console.json\",   name = \"my-nifty-oauth-client\" ) credentials_user_oauth2(scopes, client) } # }"},{"path":"https://gargle.r-lib.org/dev/reference/field_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a field mask — field_mask","title":"Generate a field mask — field_mask","text":"Many Google API requests take field mask, via fields parameter, URL /body. field_mask() generates field mask R list, typically list destined part body request writes updates resource. field_mask() designed help common case attributes wish modify exactly ones represented object. possible use \"larger\" field mask, either less specific explicitly includes attributes, case attributes covered mask absent object reset default values. exactly use case field_mask() designed , output still useful first step constructing mask.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/field_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a field mask — field_mask","text":"","code":"field_mask(x)"},{"path":"https://gargle.r-lib.org/dev/reference/field_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a field mask — field_mask","text":"x named R list, requirement names applies levels, .e. recursively.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/field_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a field mask — field_mask","text":"Google API field mask, string.","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/reference/field_mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a field mask — field_mask","text":"","code":"x <- list(sheetId = 1234, title = \"my_favorite_worksheet\") field_mask(x) #> [1] \"sheetId,title\"  x <- list(   userEnteredFormat = list(     backgroundColor = list(       red = 159 / 255, green = 183 / 255, blue = 196 / 255     )   ) ) field_mask(x) #> [1] \"userEnteredFormat.backgroundColor(red,green,blue)\"  x <- list(   sheetId = 1234,   gridProperties = list(rowCount = 5, columnCount = 3) ) field_mask(x) #> [1] \"sheetId,gridProperties(rowCount,columnCount)\""},{"path":"https://gargle.r-lib.org/dev/reference/gargle-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gargle: Utilities for Working with Google APIs — gargle-package","title":"gargle: Utilities for Working with Google APIs — gargle-package","text":"Provides utilities working Google APIs https://developers.google.com/apis-explorer. includes functions classes handling common credential types preparing, executing, processing HTTP requests.","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/reference/gargle-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gargle: Utilities for Working with Google APIs — gargle-package","text":"Maintainer: Jennifer Bryan jenny@posit.co (ORCID) Authors: Craig Citro craigcitro@google.com Hadley Wickham hadley@posit.co (ORCID) contributors: Google Inc [copyright holder] Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle2.0_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a gargle token — gargle2.0_token","title":"Generate a gargle token — gargle2.0_token","text":"Constructor function objects class Gargle2.0.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle2.0_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a gargle token — gargle2.0_token","text":"","code":"gargle2.0_token(   email = gargle_oauth_email(),   client = gargle_client(),   package = \"gargle\",   scope = NULL,   use_oob = gargle_oob_default(),   credentials = NULL,   cache = if (is.null(credentials)) gargle_oauth_cache() else FALSE,   ...,   app = deprecated() )"},{"path":"https://gargle.r-lib.org/dev/reference/gargle2.0_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a gargle token — gargle2.0_token","text":"email Optional. specified, email can take several different forms: \"jane@gmail.com\", .e. actual email address. allows user target specific Google identity. specified, used token lookup, .e. determine suitable token already available cache. token found, email used pre-select targeted Google identity OAuth chooser. (Note, however, email associated token cached always determined token , never argument). \"*@example.com\", .e. domain-glob pattern. can helpful need code \"just works\" alice@example.com bob@example.com. TRUE means approving email auto-discovery. exactly one matching token found cache, used. FALSE NA mean want ignore token cache force new OAuth dance browser. Defaults option named \"gargle_oauth_email\", retrieved gargle_oauth_email() (unless wrapper package implements different default behavior). client Google OAuth client, preferably constructed via gargle_oauth_client_from_json(), returns instance gargle_oauth_client. backwards compatibility, limited time, gargle still accept \"OAuth app\" created httr::oauth_app(). package Name package requesting token. Used messages. scope character vector scopes request. use_oob Whether use --band authentication (, perhaps, variant implemented gargle known \"pseudo-OOB\") first acquiring token. Defaults value returned gargle_oob_default(). Note (pseudo-)OOB auth affects initial OAuth dance. retrieve (possibly refresh) cached token, use_oob effect. OAuth client provided implicitly wrapper package, type probably defaults value returned gargle_oauth_client_type(). can take control client type setting options(gargle_oauth_client_type = \"web\") options(gargle_oauth_client_type = \"installed\"). credentials Advanced use : allows completely customise token generation. cache Specifies OAuth token cache. Defaults option named \"gargle_oauth_cache\", retrieved via gargle_oauth_cache(). ... Absorbs arguments intended use credential functions. used. app Replaced client argument.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle2.0_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a gargle token — gargle2.0_token","text":"object class Gargle2.0, either new loaded cache.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle2.0_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a gargle token — gargle2.0_token","text":"","code":"if (FALSE) { # \\dontrun{ gargle2.0_token() } # }"},{"path":"https://gargle.r-lib.org/dev/reference/gargle_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"API key for demonstration purposes — gargle_api_key","title":"API key for demonstration purposes — gargle_api_key","text":"APIs accept requests public resources, case request must sent API key lieu token. function provides API key limited use prototyping testing documentation gargle . key may deleted rotated time. guarantees APIs enabled. USE PACKAGE anything interactive, small-scale experimentation. can get API key, without limitations. See get API credentials vignette details.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"API key for demonstration purposes — gargle_api_key","text":"","code":"gargle_api_key()"},{"path":"https://gargle.r-lib.org/dev/reference/gargle_api_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"API key for demonstration purposes — gargle_api_key","text":"","code":"gargle_api_key()"},{"path":"https://gargle.r-lib.org/dev/reference/gargle_client.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth client for demonstration purposes — gargle_client","title":"OAuth client for demonstration purposes — gargle_client","text":"Invisibly returns instance gargle_oauth_client can used test drive gargle obtaining client ID secret. OAuth client may deleted rotated time. guarantees APIs enabled. USE PACKAGE anything interactive, small-scale experimentation. can get OAuth client ID secret, without limitations. See vignette(\"get-api-credentials\") details.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth client for demonstration purposes — gargle_client","text":"","code":"gargle_client(type = NULL)"},{"path":"https://gargle.r-lib.org/dev/reference/gargle_client.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth client for demonstration purposes — gargle_client","text":"type Specifies type OAuth client. valid values subset possible Google client types reflect key used describe client JSON representation: \"installed\" associated \"Desktop app\" \"web\" associated \"Web application\"","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_client.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth client for demonstration purposes — gargle_client","text":"OAuth client, produced gargle_oauth_client(), invisibly.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth client for demonstration purposes — gargle_client","text":"","code":"if (FALSE) { # \\dontrun{ gargle_client() } # }"},{"path":"https://gargle.r-lib.org/dev/reference/gargle_map_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"Map a cli-styled template over an object — gargle_map_cli","title":"Map a cli-styled template over an object — gargle_map_cli","text":"internal use gargle, googledrive, googlesheets4 (now).","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_map_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map a cli-styled template over an object — gargle_map_cli","text":"","code":"gargle_map_cli(x, ...)"},{"path":"https://gargle.r-lib.org/dev/reference/gargle_oauth_client_from_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an OAuth client for Google — gargle_oauth_client_from_json","title":"Create an OAuth client for Google — gargle_oauth_client_from_json","text":"gargle_oauth_client consists : type. gargle supports \"Desktop app\" \"Web application\" client types. Different types associated different OAuth flows. client ID secret. Optionally, one redirect URIs. name. really human-facing label. , rather, can used way, default just hash. recommend using name name used label client ID Google Cloud Platform Console. gargle_oauth_client adaptation httr's httr::oauth_app() (currently) httr2's oauth_client() (gargle migrate future).","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_oauth_client_from_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an OAuth client for Google — gargle_oauth_client_from_json","text":"","code":"gargle_oauth_client_from_json(path, name = NULL)  gargle_oauth_client(   id,   secret,   redirect_uris = NULL,   type = c(\"installed\", \"web\"),   name = hash(id) )"},{"path":"https://gargle.r-lib.org/dev/reference/gargle_oauth_client_from_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an OAuth client for Google — gargle_oauth_client_from_json","text":"path JSON downloaded Google Cloud Console, containing client id secret, one forms supported txt argument jsonlite::fromJSON() (typically, file path JSON string). name label specific client, presumably name used label Google Cloud Console. Unfortunately way make true programmatically, .e. JSON representation contain information. id Client ID secret Client secret redirect_uris application listens response Google's authorization server. configure specifically creating client (possible clients \"web\" type), can leave unspecified. type Specifies type OAuth client. valid values subset possible Google client types reflect key used describe client JSON representation: \"installed\" associated \"Desktop app\" \"web\" associated \"Web application\"","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_oauth_client_from_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an OAuth client for Google — gargle_oauth_client_from_json","text":"OAuth client: S3 list class gargle_oauth_client. backwards compatibility reasons, currently also inherits httr S3 class oauth_app, temporary measure. instance gargle_oauth_client stores information httr's oauth_app, OAuth client's type (\"web\" \"installed\"). redundant fields object httr--httr2 transition period. legacy fields appname key repeat information future-facing fields name (client) id. Prefer name id appname key downstream code. Prefer constructors gargle_oauth_client_from_json() gargle_oauth_client() httr::oauth_app() oauth_app_from_json().","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_oauth_client_from_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an OAuth client for Google — gargle_oauth_client_from_json","text":"","code":"if (FALSE) { # \\dontrun{ gargle_oauth_client_from_json(   path = \"/path/to/the/JSON/you/downloaded/from/gcp/console.json\",   name = \"my-nifty-oauth-client\" ) } # }  gargle_oauth_client(   id = \"some_long_id\",   secret = \"ssshhhhh_its_a_secret\",   name = \"my-nifty-oauth-client\" ) #> <gargle_oauth_client> #> name: my-nifty-oauth-client #> id: some_long_id #> secret: <REDACTED> #> type: installed"},{"path":"https://gargle.r-lib.org/dev/reference/gargle_oauth_sitrep.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth token situation report — gargle_oauth_sitrep","title":"OAuth token situation report — gargle_oauth_sitrep","text":"Get human-oriented overview existing gargle OAuth tokens: Filepath current cache Number tokens found Compact summary associated Email = Google identity OAuth client (actually, just nickname) Scopes Hash (actually, just first 7 characters) Mostly useful development gargle client packages.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_oauth_sitrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OAuth token situation report — gargle_oauth_sitrep","text":"","code":"gargle_oauth_sitrep(cache = NULL)"},{"path":"https://gargle.r-lib.org/dev/reference/gargle_oauth_sitrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth token situation report — gargle_oauth_sitrep","text":"cache Specifies OAuth token cache. Defaults option named \"gargle_oauth_cache\", retrieved via gargle_oauth_cache().","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_oauth_sitrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OAuth token situation report — gargle_oauth_sitrep","text":"data frame one row per cached token, invisibly. Note data frame may contain columns seems, e.g. filepath column printed default.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_oauth_sitrep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OAuth token situation report — gargle_oauth_sitrep","text":"","code":"gargle_oauth_sitrep() #> ℹ Reporting the default cache location. #> No gargle OAuth cache found at ~/.cache/gargle."},{"path":"https://gargle.r-lib.org/dev/reference/gargle_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Options consulted by gargle — gargle_options","title":"Options consulted by gargle — gargle_options","text":"Wrapper functions around options consulted gargle, provide: place hang documentation. mechanism setting default. built-defaults suit , set one options. Typically, done .Rprofile startup file, code along lines:","code":"options(   gargle_oauth_email = \"jane@example.com\",   gargle_oauth_cache = \"/path/to/folder/that/does/not/sync/to/cloud\" )"},{"path":"https://gargle.r-lib.org/dev/reference/gargle_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Options consulted by gargle — gargle_options","text":"","code":"gargle_oauth_email()  gargle_oob_default()  gargle_oauth_cache()  gargle_oauth_client_type()  gargle_verbosity()  local_gargle_verbosity(level, env = caller_env())  with_gargle_verbosity(level, code)"},{"path":"https://gargle.r-lib.org/dev/reference/gargle_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Options consulted by gargle — gargle_options","text":"level Verbosity level: \"debug\" > \"info\" > \"silent\" env environment use scoping code Code execute specified verbosity level","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_options.html","id":"gargle-oauth-email","dir":"Reference","previous_headings":"","what":"gargle_oauth_email","title":"Options consulted by gargle — gargle_options","text":"gargle_oauth_email() returns option named \"gargle_oauth_email\", undefined default. set, option one : actual email address corresponding preferred Google identity. Example:janedoe@gmail.com. glob pattern indicates preferred Google domain. Example:*@example.com. TRUE allow email OAuth token auto-discovery, exactly one suitable token found cache. FALSE NA force OAuth dance browser.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_options.html","id":"gargle-oob-default","dir":"Reference","previous_headings":"","what":"gargle_oob_default","title":"Options consulted by gargle — gargle_options","text":"gargle_oob_default() returns TRUE unconditionally RStudio Server, Posit Workbench, Posit Cloud, Google Colaboratory, since possible launch local web server contexts. case, final step OAuth dance, user redirected specific URL must copy code paste back R session. contexts, gargle_oob_default() consults option named \"gargle_oob_default\", option named \"httr_oob_default\", eventually defaults FALSE. \"oob\" stands --band. Read --band authentication vignette vignette(\"auth--web\").","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_options.html","id":"gargle-oauth-cache","dir":"Reference","previous_headings":"","what":"gargle_oauth_cache","title":"Options consulted by gargle — gargle_options","text":"gargle_oauth_cache() returns option named \"gargle_oauth_cache\", defaulting NA. defined, option must set logical value string. TRUE means cache using default user-level cache file, ~/.R/gargle/gargle-oauth, FALSE means cache, NA means guess using sensible heuristics.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_options.html","id":"gargle-oauth-client-type","dir":"Reference","previous_headings":"","what":"gargle_oauth_client_type","title":"Options consulted by gargle — gargle_options","text":"gargle_oauth_client_type() returns option named \"gargle_oauth_client_type\", defined. defined, option must either \"installed\" \"web\". option defined, function returns: \"web\" RStudio Server, Posit Workbench, Posit Cloud, Google Colaboratory \"installed\" otherwise Primarily intended help infer suitable OAuth client type user relying built-client, tidyverse client used packages like bigrquery, googledrive, googlesheets4.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_options.html","id":"gargle-verbosity","dir":"Reference","previous_headings":"","what":"gargle_verbosity","title":"Options consulted by gargle — gargle_options","text":"gargle_verbosity() returns option named \"gargle_verbosity\", determines gargle's verbosity. three possible values, inspired logging levels log4j: \"debug\": Fine-grained information helpful debugging, e.g. figuring token_fetch() working registry credential functions. Previously, activated setting option named \"gargle_quiet\" FALSE. \"info\" (default): High-level information typical user needs see. Since typical gargle usage always indirect, .e. gargle called another package, gargle quiet. messages emitted gargle_verbosity = \"info\". \"silent\": messages . However, warnings errors still thrown normally.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Options consulted by gargle — gargle_options","text":"","code":"gargle_oauth_email() #> NULL gargle_oob_default() #> [1] FALSE gargle_oauth_cache() #> [1] NA gargle_oauth_client_type() #> [1] \"installed\" gargle_verbosity() #> [1] \"info\""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_secret.html","id":null,"dir":"Reference","previous_headings":"","what":"Encrypt/decrypt JSON or an R object — gargle_secret","title":"Encrypt/decrypt JSON or an R object — gargle_secret","text":"functions help encrypt decrypt confidential information might need deploying gargle-using projects CI/CD. basically rely inlined copies secret functions httr2 package. awkwardness inlining code httr2 can removed /gargle starts depend httr2. secret_encrypt_json() + secret_decrypt_json() pair unique gargle, given frequently Google auth relies JSON files, e.g., service account tokens OAuth clients. secret_write_rds() + secret_read_rds() pair just copy functions httr2. handy need secure user token. secret_make_key() secret_has_key() also copies functions httr2. Use secret_make_key generate key. Use secret_has_key() condition key availability , e.g., examples, tests, apps.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_secret.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encrypt/decrypt JSON or an R object — gargle_secret","text":"","code":"secret_encrypt_json(json, path = NULL, key)  secret_decrypt_json(path, key)  secret_make_key()  secret_write_rds(x, path, key)  secret_read_rds(path, key)  secret_has_key(key)"},{"path":"https://gargle.r-lib.org/dev/reference/gargle_secret.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encrypt/decrypt JSON or an R object — gargle_secret","text":"json JSON file (string). path path write (secret_encrypt_json(), secret_write_rds()) read (secret_decrypt_json(), secret_read_rds()). key Encryption key, implemented httr2's secret functions. almost always name environment variable whose value generated secret_make_key() (inlined copy httr2::secret_make_key()). x R object.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_secret.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encrypt/decrypt JSON or an R object — gargle_secret","text":"secret_encrypt_json(): encrypted JSON string, invisibly. typical use, function mainly called side effect, write encrypted file. secret_decrypt_json(): decrypted JSON string, invisibly. secret_write_rds(): x, invisibly secret_read_rds(): decrypted object. secret_make_key(): random string use encryption key. secret_has_key() returns TRUE key available FALSE otherwise.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gargle_secret.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encrypt/decrypt JSON or an R object — gargle_secret","text":"","code":"# gargle ships with JSON for a fake service account # here we put the encrypted JSON into a new file tmp <- tempfile() secret_encrypt_json(   fs::path_package(\"gargle\", \"extdata\", \"fake_service_account.json\"),   tmp,   key = \"GARGLE_KEY\" )  # complete the round trip by providing the decrypted JSON to a credential # function credentials_service_account(  scopes = \"https://www.googleapis.com/auth/userinfo.email\",  path = secret_decrypt_json(    fs::path_package(\"gargle\", \"secret\", \"gargle-testing.json\"),    key = \"GARGLE_KEY\"  ) ) #> <Token> #> <oauth_endpoint> #>  authorize: https://accounts.google.com/o/oauth2/v2/auth #>  access:    https://oauth2.googleapis.com/token #>  validate:  https://oauth2.googleapis.com/tokeninfo #>  revoke:    https://oauth2.googleapis.com/revoke #> NULL #> <credentials> access_token, expires_in, token_type #> ---  file.remove(tmp) #> [1] TRUE  # make an artificial Gargle2.0 token fauxen <- gargle2.0_token(   email = \"jane@example.org\",   client = gargle_oauth_client(     id = \"CLIENT_ID\", secret = \"SECRET\", name = \"CLIENT\"   ),   credentials = list(token = \"fauxen\"),   cache = FALSE ) fauxen #>  #> ── <Token (via gargle)> ─────────────────────────────────────────────── #> oauth_endpoint: google #>         client: CLIENT #>          email: jane@example.org #>         scopes: ...userinfo.email #>    credentials: token  # store the fake token in an encrypted file tmp2 <- tempfile() secret_write_rds(fauxen, path = tmp2, key = \"GARGLE_KEY\")  # complete the round trip by providing the decrypted token to the \"BYO token\" # credential function rt_fauxen <- credentials_byo_oauth2(   token  = secret_read_rds(tmp2, key = \"GARGLE_KEY\") ) rt_fauxen #>  #> ── <Token (via gargle)> ─────────────────────────────────────────────── #> oauth_endpoint: google #>         client: CLIENT #>          email: jane@example.org #>         scopes: ...userinfo.email #>    credentials: token  file.remove(tmp2) #> [1] TRUE"},{"path":"https://gargle.r-lib.org/dev/reference/gce_access_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch access token for a service account on GCE — gce_access_token","title":"Fetch access token for a service account on GCE — gce_access_token","text":"Fetch access token service account GCE","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gce_access_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch access token for a service account on GCE — gce_access_token","text":"","code":"gce_access_token(   scopes = \"https://www.googleapis.com/auth/cloud-platform\",   service_account = \"default\" )"},{"path":"https://gargle.r-lib.org/dev/reference/gce_access_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch access token for a service account on GCE — gce_access_token","text":"scopes character vector scopes request. Pick listed https://developers.google.com/identity/protocols/oauth2/scopes. certain token flows, \"https://www.googleapis.com/auth/userinfo.email\" scope unconditionally included. grants permission retrieve email address associated token; gargle uses index cached OAuth tokens. grants permission view send email generally considered low-value scope. service_account Name GCE service account use.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gce_instance_service_accounts.html","id":null,"dir":"Reference","previous_headings":"","what":"List all service accounts available on this GCE instance — gce_instance_service_accounts","title":"List all service accounts available on this GCE instance — gce_instance_service_accounts","text":"List service accounts available GCE instance","code":""},{"path":"https://gargle.r-lib.org/dev/reference/gce_instance_service_accounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all service accounts available on this GCE instance — gce_instance_service_accounts","text":"","code":"gce_instance_service_accounts()"},{"path":"https://gargle.r-lib.org/dev/reference/gce_instance_service_accounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all service accounts available on this GCE instance — gce_instance_service_accounts","text":"data frame, row service account. Due aliasing, guarantee row represents distinct service account.","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/reference/gce_instance_service_accounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all service accounts available on this GCE instance — gce_instance_service_accounts","text":"","code":"if (FALSE) { # gargle:::is_gce() credentials_gce() }"},{"path":"https://gargle.r-lib.org/dev/reference/init_AuthState.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an AuthState — init_AuthState","title":"Create an AuthState — init_AuthState","text":"Constructor function objects class AuthState.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/init_AuthState.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an AuthState — init_AuthState","text":"","code":"init_AuthState(   package = NA_character_,   client = NULL,   api_key = NULL,   auth_active = TRUE,   cred = NULL,   app = deprecated() )"},{"path":"https://gargle.r-lib.org/dev/reference/init_AuthState.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an AuthState — init_AuthState","text":"package Package name, optional string. recommended record name package whose auth state managed. Ultimately, may used downstream messaging. client Google OAuth client, preferably constructed via gargle_oauth_client_from_json(), returns instance gargle_oauth_client. backwards compatibility, limited time, gargle still accept \"OAuth app\" created httr::oauth_app(). api_key Optional. API key (string). APIs accept unauthorized, \"token-free\" requests public resources, request includes API key. auth_active Logical. TRUE means requests include token (probably API key). FALSE means requests include API key (probably token). cred Credentials. Typically populated indirectly via token_fetch(). app Replaced client argument.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/init_AuthState.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an AuthState — init_AuthState","text":"object class AuthState.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/init_AuthState.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an AuthState — init_AuthState","text":"","code":"my_client <- gargle_oauth_client(   id = \"some_long_client_id\",   secret = \"ssshhhhh_its_a_secret\",   name = \"my-nifty-oauth-client\" )  init_AuthState(   package = \"my_package\",   client = my_client,   api_key = \"api_key_api_key_api_key\", ) #>  #> ── <AuthState (via gargle)> ─────────────────────────────────────────── #>     package: my_package #>      client: my-nifty-oauth-client #>     api_key: api_key... #> auth_active: TRUE #> credentials: <NULL>"},{"path":"https://gargle.r-lib.org/dev/reference/internal-assets.html","id":null,"dir":"Reference","previous_headings":"","what":"Assets for internal use — internal-assets","title":"Assets for internal use — internal-assets","text":"Assets use inside specific packages maintained tidyverse team.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/internal-assets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assets for internal use — internal-assets","text":"","code":"tidyverse_api_key()  tidyverse_client(type = NULL)  tidyverse_app()"},{"path":"https://gargle.r-lib.org/dev/reference/oauth_app_from_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an OAuth app from JSON — oauth_app_from_json","title":"Create an OAuth app from JSON — oauth_app_from_json","text":"oauth_app_from_json() replaced gargle_oauth_client_from_json(), light new gargle_oauth_client class. Now oauth_app_from_json() potentially warns deprecation immediately passes inputs gargle_oauth_client_from_json(). gargle_app() replaced gargle_client().","code":""},{"path":"https://gargle.r-lib.org/dev/reference/oauth_app_from_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an OAuth app from JSON — oauth_app_from_json","text":"","code":"oauth_app_from_json(path, appname = NULL)  gargle_app()"},{"path":"https://gargle.r-lib.org/dev/reference/oauth_app_from_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an OAuth app from JSON — oauth_app_from_json","text":"path JSON downloaded Google Cloud Console, containing client id secret, one forms supported txt argument jsonlite::fromJSON() (typically, file path JSON string). appname name application.  used OAuth, used make easier identify different applications.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/oauth_external_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate OAuth token for an external account — oauth_external_token","title":"Generate OAuth token for an external account — oauth_external_token","text":"Generate OAuth token external account","code":""},{"path":"https://gargle.r-lib.org/dev/reference/oauth_external_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate OAuth token for an external account — oauth_external_token","text":"","code":"oauth_external_token(   path = \"\",   scopes = \"https://www.googleapis.com/auth/cloud-platform\" )"},{"path":"https://gargle.r-lib.org/dev/reference/oauth_external_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate OAuth token for an external account — oauth_external_token","text":"path JSON containing workload identity configuration external account, one forms supported txt argument jsonlite::fromJSON() (probably, file path, although JSON string). instructions generating configuration given Configuring workload identity federation. Note external account tokens natural fit use Application Default Credentials, consider storing configuration file one standard locations consulted ADC, instead providing path explicitly. See credentials_app_default() . scopes character vector scopes request. Pick listed https://developers.google.com/identity/protocols/oauth2/scopes. certain token flows, \"https://www.googleapis.com/auth/userinfo.email\" scope unconditionally included. grants permission retrieve email address associated token; gargle uses index cached OAuth tokens. grants permission view send email generally considered low-value scope.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/request_develop.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a Google API request — request_develop","title":"Build a Google API request — request_develop","text":"Intended primarily internal use client packages provide high-level wrappers users. vignette(\"request-helper-functions\") describes one might use functions inside wrapper package.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/request_develop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a Google API request — request_develop","text":"","code":"request_develop(   endpoint,   params = list(),   base_url = \"https://www.googleapis.com\" )  request_build(   method = \"GET\",   path = \"\",   params = list(),   body = list(),   token = NULL,   key = NULL,   base_url = \"https://www.googleapis.com\" )"},{"path":"https://gargle.r-lib.org/dev/reference/request_develop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a Google API request — request_develop","text":"endpoint List information target endpoint , Google's vocabulary, target \"method\". Presumably prepared Discovery Document target API. params Named list. Values destined URL substitution, query, , request_develop() , body. request_build(), body parameters must passed via body argument. base_url Character. method Character. HTTP verb, GET POST. path Character. Path resource, including API's base_url. Examples: drive/v3/drive/v3/files/{fileId}. path can template, .e. can include variables inside curly brackets, {fileId} example. variables substituted request_build(), using named parameters found params. body List. Values send API request body. token Token, ready inclusion request, .e. prepared httr::config(). key API key. Needed requests contain token. , see Google's document Credentials, access, security, identity (https://support.google.com/googleapi/answer/6158857?hl=en&ref_topic=7013279). key can passed named component params, note formal argument key clobber , non-NULL.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/request_develop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a Google API request — request_develop","text":"request_develop(): list() components method, path, params, body, base_url. request_build(): list() components method, path (post-substitution), query (input params used URL substitution), body, token, url (full URL, post-substitution, including query).","code":""},{"path":"https://gargle.r-lib.org/dev/reference/request_develop.html","id":"request-develop-","dir":"Reference","previous_headings":"","what":"request_develop()","title":"Build a Google API request — request_develop","text":"Combines user input (params) information API endpoint. endpoint contain components: path: See documentation argument. method: See documentation argument. parameters: Compared params supplied user. error thrown user-supplied params named endpoint$parameters user fails supply required parameters. return value, body parameters separated destined path substitution query. return value typically used input request_build().","code":""},{"path":"https://gargle.r-lib.org/dev/reference/request_develop.html","id":"request-build-","dir":"Reference","previous_headings":"","what":"request_build()","title":"Build a Google API request — request_develop","text":"Builds request, purely mechanical sense. function nothing specific particular Google API endpoint. Use output request_develop() hand-crafted input. params used variable substitution path. Leftover params bound path template automatically become HTTP query parameters. Adds API key query iff token = NULL removes API key otherwise. Client packages generally pass API key , note gargle_api_key() available small-scale experimentation. See googledrive::generate_request() example usage client package. googledrive internal list selected endpoints, derived Drive API Discovery Document (https://www.googleapis.com/discovery/v1/apis/drive/v3/rest), exposed via googledrive::drive_endpoints(). element list expected input endpoint. googledrive::generate_request() wrapper around request_develop() request_build() inserts googledrive-managed API key logic Team Drives. user-facing functions use googledrive::generate_request() hood.","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/reference/request_develop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a Google API request — request_develop","text":"","code":"if (FALSE) { # \\dontrun{ ## Example with a prepared endpoint ept <- googledrive::drive_endpoints(\"drive.files.update\")[[1]] req <- request_develop(   ept,   params = list(     fileId = \"abc\",     addParents = \"123\",     description = \"Exciting File\"   ) ) req  req <- request_build(   method = req$method,   path = req$path,   params = req$params,   body = req$body,   token = \"PRETEND_I_AM_A_TOKEN\" ) req  ## Example with no previous knowledge of the endpoint ## List a file's comments ## https://developers.google.com/drive/v3/reference/comments/list req <- request_build(   method = \"GET\",   path = \"drive/v3/files/{fileId}/comments\",   params = list(     fileId = \"your-file-id-goes-here\",     fields = \"*\"   ),   token = \"PRETEND_I_AM_A_TOKEN\" ) req  # Example with no previous knowledge of the endpoint and no token # use an API key for which the Places API is enabled! API_KEY <- \"1234567890\"  # get restaurants close to a location in Vancouver, BC req <- request_build(   method = \"GET\",   path = \"maps/api/place/nearbysearch/json\",   params = list(     location = \"49.268682,-123.167117\",     radius = 100,     type = \"restaurant\"   ),   key = API_KEY,   base_url = \"https://maps.googleapis.com\" ) resp <- request_make(req) out <- response_process(resp) vapply(out$results, function(x) x$name, character(1)) } # }"},{"path":"https://gargle.r-lib.org/dev/reference/request_make.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a Google API request — request_make","title":"Make a Google API request — request_make","text":"Intended primarily internal use client packages provide high-level wrappers users. request_make() relatively little: Calls HTTP method. Adds user agent. Enforces \"json\" default encode. differs httr's default behaviour, aligns better Google APIs. Typically input created request_build() output processed response_process().","code":""},{"path":"https://gargle.r-lib.org/dev/reference/request_make.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a Google API request — request_make","text":"","code":"request_make(x, ..., encode = \"json\", user_agent = gargle_user_agent())"},{"path":"https://gargle.r-lib.org/dev/reference/request_make.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a Google API request — request_make","text":"x List. Holds components HTTP request, presumably created request_develop() request_build(). Must contain method url. present, body token used. ... Optional arguments passed HTTP method. Currently neither gargle httr checks used, aware unused arguments may silently ignored. encode body named list, encoded? Can one form (application/x-www-form-urlencoded), multipart, (multipart/form-data), json (application/json). \"multipart\", list elements can strings objects created upload_file(). \"form\", elements coerced strings escaped, use () prevent double-escaping. \"json\", parameters automatically \"unboxed\" (.e. length 1 vectors converted scalars). preserve length 1 vector vector, wrap (). \"raw\", either character raw vector. need make sure set content_type() . user_agent user agent string, prepared httr::user_agent(). doubt, client package internal function extends gargle_user_agent() prepending return value client package's name version.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/request_make.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a Google API request — request_make","text":"Object class response httr::httr.","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/reference/request_make.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a Google API request — request_make","text":"","code":"if (FALSE) { # \\dontrun{ req <- gargle::request_build(   method = \"GET\",   path = \"path/to/the/resource\",   token = \"PRETEND_I_AM_TOKEN\" ) gargle::request_make(req) } # }"},{"path":"https://gargle.r-lib.org/dev/reference/request_retry.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a Google API request, repeatedly — request_retry","title":"Make a Google API request, repeatedly — request_retry","text":"Intended primarily internal use client packages provide high-level wrappers users. drop-substitute request_make() also ability retry request. Codes considered retryable: 408, 429, 500, 502, 503.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/request_retry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a Google API request, repeatedly — request_retry","text":"","code":"request_retry(..., max_tries_total = 5, max_total_wait_time_in_seconds = 100)"},{"path":"https://gargle.r-lib.org/dev/reference/request_retry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a Google API request, repeatedly — request_retry","text":"... Passed along request_make(). max_tries_total Maximum number tries. max_total_wait_time_in_seconds Total seconds willing dedicate waiting, summed across tries. technical upper bound actual cumulative waiting less.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/request_retry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a Google API request, repeatedly — request_retry","text":"Object class response httr::httr.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/request_retry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a Google API request, repeatedly — request_retry","text":"Consider example willing make request 5 times.   5 - 1 = 4 waits generally want waiting period get longer, exponential way. schemes called exponential backoff. request_retry() implements exponential backoff \"full jitter\", waiting time generated uniform distribution, interval support grows exponentially. common alternative \"equal jitter\", adds noise fixed, exponentially increasing waiting times. Either way waiting times based geometric series, , convention, usually written terms powers 2:   terms series require knowledge b, -called exponential base, many retry functions libraries require user specify . users find easier declare total amount waiting time can tolerate one request. Therefore request_retry() asks instead solves b internally. inspired Opnieuw Python library retries. Opnieuw's interface designed eliminate uncertainty around: Units: thing given seconds? minutes? milliseconds? Ambiguity around things counted: starting 0 1? counting tries just retries? Non-intuitive required inputs, e.g., exponential base. Let n total number tries willing make (argument max_tries_total) let W total amount seconds willing dedicate making retrying request (argument max_total_wait_time_in_seconds). determine b:","code":"try  1  2    3        4                5      |--|----|--------|----------------| wait  1   2      3           4 b, 2b, 4b, 8b, ...   = b * 2^0, b * 2^1, b * 2^2, b * 2^3, ... sum_{i=0}^(n - 1) b * 2^i = W b * sum_{i=0}^(n - 1) 2^i = W        b * ( (2 ^ n) - 1) = W                         b = W / ( (2 ^ n) - 1)"},{"path":"https://gargle.r-lib.org/dev/reference/request_retry.html","id":"special-cases","dir":"Reference","previous_headings":"","what":"Special cases","title":"Make a Google API request, repeatedly — request_retry","text":"request_retry() departs exponential backoff three special cases: actually implements truncated exponential backoff. floor ceiling random wait times. Retry-header: response header named Retry-(case-insensitive), assumed provide non-negative integer indicating number seconds wait. present, wait many seconds generate random waiting time. (theory, header can alternatively provide datetime retry, first-hand experience variant Google API.) Sheets API quota exhaustion: course googlesheets4 development, grown familiar 429 RESOURCE_EXHAUSTED error. 2023-04-15, Sheets API v4 limit 300 requests per minute per project 60 requests per minute per user per project. Limits reads writes tracked separately. experience, \"60 (read write) requests per minute per user\" limit one hit often. detect specific failure, first wait time bit one minute, revert exponential backoff.","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/reference/request_retry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a Google API request, repeatedly — request_retry","text":"","code":"if (FALSE) { # \\dontrun{ req <- gargle::request_build(   method = \"GET\",   path = \"path/to/the/resource\",   token = \"PRETEND_I_AM_TOKEN\" ) gargle::request_retry(req) } # }"},{"path":"https://gargle.r-lib.org/dev/reference/response_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a Google API response — response_process","title":"Process a Google API response — response_process","text":"response_process() intended primarily internal use client packages provide high-level wrappers users. Typically applied final step sequence calls: Request prepared request_build(). Request made request_make(). Response processed response_process(). needed successful request parse JSON extracted via httr::content(). Therefore, main point response_process() handle less happy outcomes: Status codes 400s (client error) 500s (server error). structure error payload varies across Google APIs try create useful message variants know . Non-JSON content type, HTML. Status code 100s (information) 300s (redirection). unexpected. process_response() results error, redacted version resp input returned condition (auth tokens removed).","code":""},{"path":"https://gargle.r-lib.org/dev/reference/response_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a Google API response — response_process","text":"","code":"response_process(   resp,   error_message = gargle_error_message,   remember = TRUE,   call = caller_env() )  response_as_json(resp, call = caller_env())  gargle_error_message(resp, call = caller_env())"},{"path":"https://gargle.r-lib.org/dev/reference/response_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a Google API response — response_process","text":"resp Object class response httr::httr. error_message Function produces informative error message primary input, resp. must return character vector. remember Whether remember recently processed response. call execution environment currently running function, e.g. call = caller_env(). corresponding function call retrieved mentioned error messages source error. need supply call throwing condition helper function relevant mention message. Can also NULL defused function call respectively display call hard-code code display. information error calls, see Including function calls error messages.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/response_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a Google API response — response_process","text":"content request, list. HTTP status code 204 (content) special case returning TRUE.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/response_process.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process a Google API response — response_process","text":"remember = TRUE (default), gargle stores recently seen response internally, post hoc examination. stored response literally just recent resp input, auth tokens redacted. can accessed via unexported function gargle:::gargle_last_response(). companion function gargle:::gargle_last_content() returns content last response, probably useful form post mortem analysis. response_as_json() helper exported aid maintainers wish use error_message function, instead gargle's built-gargle_error_message(). implementing custom error_message function, call response_as_json() immediately input order inherit gargle's handling non-JSON input.","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/reference/response_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process a Google API response — response_process","text":"","code":"if (FALSE) { # \\dontrun{ # get an OAuth2 token with 'userinfo.email' scope token <- token_fetch(scopes = \"https://www.googleapis.com/auth/userinfo.email\")  # see the email associated with this token req <- gargle::request_build(   method = \"GET\",   path = \"v1/userinfo\",   token = token,   base_url = \"https://openidconnect.googleapis.com\" ) resp <- gargle::request_make(req) response_process(resp)  # make a bad request (this token has incorrect scope) req <- gargle::request_build(   method = \"GET\",   path = \"fitness/v1/users/{userId}/dataSources\",   token = token,   params = list(userId = 12345) ) resp <- gargle::request_make(req) response_process(resp) } # }"},{"path":"https://gargle.r-lib.org/dev/reference/token-info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get info from a token — token-info","title":"Get info from a token — token-info","text":"functions send token Google endpoints return info token user.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/token-info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get info from a token — token-info","text":"","code":"token_userinfo(token)  token_email(token)  token_tokeninfo(token)"},{"path":"https://gargle.r-lib.org/dev/reference/token-info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get info from a token — token-info","text":"token token class Token2.0 object httr's class request, .e. token prepared httr::config() Token2.0 auth_token component.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/token-info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get info from a token — token-info","text":"list containing: token_userinfo(): user info token_email(): user's email (obtained call token_userinfo()) token_tokeninfo(): token info","code":""},{"path":"https://gargle.r-lib.org/dev/reference/token-info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get info from a token — token-info","text":"hard say exactly info returned \"userinfo\" endpoint targetted token_userinfo(). depends token's scopes. possible, OAuth2 tokens obtained via gargle package include https://www.googleapis.com/auth/userinfo.email scope, guarantees can learn email associated token. token https://www.googleapis.com/auth/userinfo.profile scope, even information available. token unknown arbitrary scopes, make promises information returned.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/token-info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get info from a token — token-info","text":"","code":"if (FALSE) { # \\dontrun{ # with service account token t <- token_fetch(   scopes = \"https://www.googleapis.com/auth/drive\",   path   = \"path/to/service/account/token/blah-blah-blah.json\" ) # or with an OAuth token t <- token_fetch(   scopes = \"https://www.googleapis.com/auth/drive\",   email  = \"janedoe@example.com\" ) token_userinfo(t) token_email(t) tokens_tokeninfo(t) } # }"},{"path":"https://gargle.r-lib.org/dev/reference/token_fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch a token for the given scopes — token_fetch","title":"Fetch a token for the given scopes — token_fetch","text":"rather magical function calls series concrete credential-fetching functions, wrapped tryCatch(). token_fetch() keeps trying succeeds functions try. See vignette(\"-gargle-gets-tokens\") full description token_fetch().","code":""},{"path":"https://gargle.r-lib.org/dev/reference/token_fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch a token for the given scopes — token_fetch","text":"","code":"token_fetch(scopes = NULL, ...)"},{"path":"https://gargle.r-lib.org/dev/reference/token_fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch a token for the given scopes — token_fetch","text":"scopes character vector scopes request. Pick listed https://developers.google.com/identity/protocols/oauth2/scopes. certain token flows, \"https://www.googleapis.com/auth/userinfo.email\" scope unconditionally included. grants permission retrieve email address associated token; gargle uses index cached OAuth tokens. grants permission view send email generally considered low-value scope. ... Additional arguments passed credential functions.","code":""},{"path":"https://gargle.r-lib.org/dev/reference/token_fetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch a token for the given scopes — token_fetch","text":"httr::Token (often instance something inherits httr::Token) NULL.","code":""},{"path":[]},{"path":"https://gargle.r-lib.org/dev/reference/token_fetch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch a token for the given scopes — token_fetch","text":"","code":"if (FALSE) { # \\dontrun{ token_fetch(scopes = \"https://www.googleapis.com/auth/userinfo.email\") } # }"},{"path":[]},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-160","dir":"Changelog","previous_headings":"","what":"gargle 1.6.0","title":"gargle 1.6.0","text":"CRAN release: 2025-09-03 retrying request, messaging reveals detail failed request counts retry happens (part #64). Better handling error details include localized message (#293) Defensive escaping {..} Google-provided error messages, prevent cli::cli_abort() trying (failing) string interpolation (https://github.com/tidyverse/googlesheets4/issues/319) gargle better able detect ’s running Posit Workbench, necessarily RStudio, Positron VS Code (#291).","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-152","dir":"Changelog","previous_headings":"","what":"gargle 1.5.2","title":"gargle 1.5.2","text":"CRAN release: 2023-07-20 Fixed bug internal helper validates input specifying service account. helper targets common mistake JSON OAuth client provided argument meant service account (#270).","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-151","dir":"Changelog","previous_headings":"","what":"gargle 1.5.1","title":"gargle 1.5.1","text":"CRAN release: 2023-06-19 Completed overlooked, unfinished work around OAuth “app” “client” transition affected --band auth (#263, #264). secret_*() functions discoverable via documentation.","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-150","dir":"Changelog","previous_headings":"","what":"gargle 1.5.0","title":"gargle 1.5.0","text":"CRAN release: 2023-06-10 gargle’s existing unexported secret_*() functions deprecated, favor new, exported secret_*() functions built inlined httr2. vignette(\"managing-tokens-securely\") updated reflect new, recommended strategy encrypting secrets. secret_encrypt_json() / secret_decrypt_json() new gargle-specific functions. secret_write_rds() / secret_read_rds(), secret_make_key(), secret_had_key() basically copies httr2 counterparts. Legacy functions move away : secret_pw_name(), secret_pw_gen(), secret_pw_exists(), secret_pw_get(), secret_can_decrypt(), secret_read(), secret_write(). new approach makes much easier use gargle functions encrypt decrypt credentials project necessarily R package. transition OAuth “app” OAuth “client” fully enacted now. process tarted v1.3.0, \"gargle_oauth_client\" class introduced, support new pseudo-OOB auth flow. deprecations implemented preserve backwards compatibility time. release, function, argument, field names updated “client” terminology: init_AuthState(client =) instead init_AuthState(app =) AuthState$client instead AuthState$app AuthState$set_client() instead AuthState$set_app() gargle2.0_token(client =) instead gargle2.0_token(app =) credentials_user_oauth2(client =) instead credentials_user_oauth2(app =) new vignette(\"oauth-client--app\") explains wrapper package adapt. \"gargle_verbosity\" option set \"debug\", debugging messages around user credentials. Specifically, information available email, OAuth client, scopes, goal better understanding cached token () used. check_is_service_account() new function use wrapper packages throw informative error user provides JSON OAuth client argument expecting JSON service account. response_process() improved handling responses represent HTTP error HTML content (opposed expected preferred JSON) (#254). response_process(call = caller_env()) new argument passed along various helpers, can improve error reporting user-facing functions call response_process() (#255).","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-140","dir":"Changelog","previous_headings":"","what":"gargle 1.4.0","title":"gargle 1.4.0","text":"CRAN release: 2023-04-15","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"google-compute-engine-1-4-0","dir":"Changelog","previous_headings":"","what":"Google Compute Engine","title":"gargle 1.4.0","text":"credentials_gce(scopes = NULL) now equivalent credentials_gce(scopes = \"https://www.googleapis.com/auth/cloud-platform\"), .e. ’s even stronger current towards recommended “cloud-platform” scope. credentials_gce(scopes =) now includes scopes request metadata server access token (#216). Note scopes GCE access token generally pre-determined instance associated service account creation/launch time requested scopes effect. seems harm possible contexts useful. credentials_gce() now emits considerably information \"gargle_verbosity\" option set \"debug\". example, reports mismatches requested scopes instance scopes requested scopes access token’s actual scopes. credentials_gce() stores actual scopes received access token, can differ requested scopes. also noted \"gargle_verbosity\" option set \"debug\". GceToken R6 class gains better $print() method similar gargle’s treatment tokens obtained flows.","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"behaviour-in-a-cloudserver-context-1-4-0","dir":"Changelog","previous_headings":"","what":"Behaviour in a cloud/server context","title":"gargle 1.4.0","text":"gargle better able detect ’s running Posit Workbench RStudio Server, e.g., subprocess. gargle_oauth_client_type() new function returns either “installed” “web”. returns value new global option name (\"gargle_oauth_client_type\"), defined. option defined, returns “web” RStudio Server, Posit Workbench, Posit Cloud, Google Colaboratory “installed” otherwise. context --band (OOB) auth, “installed” client type leads conventional OOB flow (available GCP projects testing mode) “web” client leads new pseudo-OOB flow. option accessor added cover contexts mentioned helpful request “web” client. credentials_user_oauth2() now works Google Colaboratory (#140).","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"everything-else-1-4-0","dir":"Changelog","previous_headings":"","what":"Everything else","title":"gargle 1.4.0","text":"gargle now elicits user input via readline(), instead via utils::menu(), favorable interacting user Jupyter notebook (#242). roxygen templating functions wrapper packages can use generate standardized documentation around auth updated reflect gargle’s pivot OAuth “app” “client”. Changes note: PREFIX_auth_configure_description() crosslinks PREFIX_oauth_client() now, PREFIX_oauth_app(). assumes package indeed introduced PREFIX_oauth_client() function (, presumably, deprecated PREFIX_oauth_app()). PREFIX_auth_configure_params() gains client argument. PREFIX_auth_configure_params() deprecates app argument uses lifecycle badge. assumed badge SVG present, can achieved usethis::use_lifecycle(). PREFIX_auth_configure_params() crosslinks gargle::gargle_oauth_client_from_json(). wrapper package therefore needs state minimum version gargle, e.g. gargle (>= 1.3.0) (higher). credentials_byo_oauth2() works now (variations ) service account tokens, intended, just user tokens (#250). also emits information scopes \"gargle_verbosity\" option set \"debug\".","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-130","dir":"Changelog","previous_headings":"","what":"gargle 1.3.0","title":"gargle 1.3.0","text":"CRAN release: 2023-01-30","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"partial-deprecation-out-of-band-oob-auth-flow-1-3-0","dir":"Changelog","previous_headings":"","what":"(Partial) deprecation out-of-band (OOB) auth flow","title":"gargle 1.3.0","text":"February 16, 2022, Google announced gradual deprecation --band (OOB) OAuth flow. OOB still works OAuth client associated GCP project testing mode going away. OOB longer supported projects production mode. accurate, production-mode projects gotten extension permit use OOB auth bit longer, ’s just temporary reprieve. typical user (eventually) impacted : Using R via RStudio Server, Posit Workbench, Posit Cloud. Using tidyverse packages googledrive, googlesheets4, bigrquery. Relying built-OAuth client. Importantly, client associated GCP project production mode. phased deprecation OOB nearly complete expect conventional OOB stop working built-tidyverse OAuth client February 1, 2023, latest. preparation , gargle gained support new flow, call pseudo-OOB (contrast conventional OOB). pseudo-OOB flow triggered use_oob = TRUE (existing convention gargle gargle-using packages) configured OAuth client “Web application” type. gargle/googledrive/googlesheets4/bigrquery packages now default “Web application” client RStudio Server, Posit Workbench Posit Cloud, leading user pseudo-OOB flow. needing re-auth , affected users still find things “just work”. Read vignette(\"auth--web\") .","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-specific-notion-of-oauth-client-1-3-0","dir":"Changelog","previous_headings":"","what":"gargle-specific notion of OAuth client","title":"gargle 1.3.0","text":"gargle_oauth_client() new constructor S3 class name. two motivations: adjust Google’s deprecation conventional OOB support gargle’s new pseudo-OOB flow, helpful gargle know whether OAuth client ID type “Web application” “Desktop app”. means need Google- gargle-specific notion OAuth client, can introduce type field. transition httr httr2 horizon, makes sense look toward httr2:oauth_client() httr::oauth_app(). gargle’s vocabulary generally shifting towards “client” away “app”. oauth_app_from_json() therefore (soft) deprecated, favor new function gargle_oauth_client_from_json(), preferred way instantiate OAuth client, since downloaded JSON conveys client type redirect URI(s). bridging measure, gargle_oauth_client currently inherits httr’s oauth_app, probably won’t true long-term. gargle_client(type =) replaces gargle_app().","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"google-compute-engine-and-google-kubernetes-engine-1-3-0","dir":"Changelog","previous_headings":"","what":"Google Compute Engine and Google Kubernetes Engine","title":"gargle 1.3.0","text":"credentials_gce() longer asks user initiating OAuth cache, relevant flow (#221). gce_instance_service_accounts() newly exported utility exposes service accounts available metadata server current instance (#234). global option \"gargle.gce.timeout\" newly documented credentials_gce(). controls timeout, seconds, requests metadata server. default value (strategy) setting often suffice, option exists empirical need increase timeout (#186, #195). vignette(\"non-interactive-auth\") new section “Workload Identity Google Kubernetes Engine (GKE)” explains gargle supports use workload identity applications running GKE. recommended method auth R code running GKE needs access Google Cloud services, BigQuery API (#197, #223, @MarkEdmondson1234).","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"credential-function-registry-1-3-0","dir":"Changelog","previous_headings":"","what":"Credential function registry","title":"gargle 1.3.0","text":"’s gotten bit easier work credential registry. primary motivation , example, Google Compute Engine, might actually want suppress auth default service account auth normal user instead. especially likely come gmailr / Gmail API. credential-fetcher credentials_byo_oauth2() moved beginning default registry. logic user specified non-NULL value token must mean business want automagic auth methods like ADC GCE tried using token (#187, #225). ... cred_funs_all() now dynamic dots (#224). Every registered credential function must unique name now. newly enforced cred_funs_add() cred_funs_set() (#224). cred_funs_list_default() new function returns gargle’s default list credential functions (#226). cred_funs_add(cred_fun = NULL) now available remove credential function registry (#224). with_cred_funs() local_cred_funs() new helpers making narrowly scoped changes registry (#226). ls argument cred_funs_set() renamed funs (#226). general, credential registry functions now return current registry, invisibly (#224).","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-121","dir":"Changelog","previous_headings":"","what":"gargle 1.2.1","title":"gargle 1.2.1","text":"CRAN release: 2022-09-08 Help files man/ re-generated, give rise valid HTML5. (impetus release, keep package safely CRAN.) switched newer oauth2.googleapis.com-based OAuth2 URIs, moving away accounts.google.com googleapis.com/oauth2 equivalents. credentials_gce() longer validates requested scopes instance scopes. practice, ’s easy check nuisance help (#161, #185 @craigcitro). request_retry() retries expanded set HTTP codes: 408, 429, 500, 502, 503. Previously, retries limited 429 (#169).","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"dependency-changes-1-2-1","dir":"Changelog","previous_headings":"","what":"Dependency changes","title":"gargle 1.2.1","text":"minimum versions rlang testthat bumped. motivation exploit adapt changes display error messages.","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-120","dir":"Changelog","previous_headings":"","what":"gargle 1.2.0","title":"gargle 1.2.0","text":"CRAN release: 2021-07-02","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"workload-identity-federation-1-2-0","dir":"Changelog","previous_headings":"","what":"Workload identity federation","title":"gargle 1.2.0","text":"credentials_external_account() new function implements “workload identity federation”, new (April 2021) keyless authentication mechanism. allows applications running non-Google Cloud platform, AWS, access Google Cloud resources without using conventional service account token, eliminating security problem posed long-lived, powerful service account credential files. credentials_external_account() inserted default registry credential-fetchers tried token_fetch(), makes automatically available certain wrapper packages, bigrquery. credentials_app_default() recognizes JSON configuration external account passes call along credentials_external_account(). new feature still experimental currently supports AWS. blog post provides good high-level introduction workload identity federation.","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"other-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"gargle 1.2.0","text":"email argument credentials_user_oauth2() accepts domain-email specification via glob pattern. goal make possible code like PKG_auth(email = \"*@example.com\") identify suitable cached token executed machine either alice@example.com bob@example.com. gargle now throws errors via cli::cli_abort(), means error messages now styling informational messages.","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"dependency-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Dependency changes","title":"gargle 1.2.0","text":"aws.ec2metadata aws.signature new Suggests.","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-110","dir":"Changelog","previous_headings":"","what":"gargle 1.1.0","title":"gargle 1.1.0","text":"CRAN release: 2021-04-02","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"oauth-token-cache-1-1-0","dir":"Changelog","previous_headings":"","what":"OAuth token cache","title":"gargle 1.1.0","text":"Two changes affect stored user OAuth tokens: Typical , macOS: ~/.R/gargle/gargle-oauth Typical , macOS: ~/Library/Caches/gargle Typical , Windows: C:/Users/jane/.R/gargle/gargle-oauth Typical , Windows: C:/Users/jane/AppData/Local/gargle/gargle/Cache Nickname previous tidyverse OAuth app: tidyverse-calliope Nickname tidyverse OAuth app gargle v1.0.0: tidyverse-clio users accept default behaviour around OAuth, changes just mean see messages cleaning moving token cache. users can also expect go interactive auth (approximately per package / API), obtain fresh tokens made current tidyverse OAuth app. rolling tidyverse OAuth app highly disruptive workflow, good wake-call using OAuth app , perhaps, entirely different auth method, using service account token non-interactive settings. always, articles explain take control auth: * https://gargle.r-lib.org/articles/get-api-credentials.html * https://gargle.r-lib.org/articles/non-interactive-auth.html","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"user-interface-1-1-0","dir":"Changelog","previous_headings":"","what":"User interface","title":"gargle 1.1.0","text":"user interface gotten stylish, thanks cli package (https://cli.r-lib.org). errors thrown gargle route rlang::abort(), providing better access backtrace , potentially, error data. errors , least, gargle_error class may also additional subclasses. gargle_verbosity() replaces gargle_quiet(). function () convenience wrapper query option name. Therefore, option named “gargle_verbosity” now replaces “gargle_quiet”. “gargle_verbosity” unset, old “gargle_quiet” still consulted, user advised update usage. new “gargle_verbosity” option expressive three levels: “debug”, equivalent previous gargle_quiet = FALSE. Use debugging troubleshooting. “info” (default), basically equivalent previous gargle_quiet = TRUE. Since gargle user-facing package, little say emits messages end users really need see. “silent”, previous equivalent little practical significance. can used suppress gargle messages. helpers with_gargle_verbosity() local_gargle_verbosity() make easy temporarily modify verbosity level, spirit withr package.","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"other-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"gargle 1.1.0","text":"special error handling OAuth token refresh fails, due deletion associated OAuth app. help users relying default app provided package , presumably, need update package (#168). gargle_oob_default() returns TRUE unconditionally running RStudio Server. response_process() gains remember argument. TRUE (default), gargle stores recent response internally (auth tokens redacted). Unexported functions gargle:::gargle_last_response() gargle:::gargle_last_content() facilitate post mortem analysis , e.g., failed request (#152). google.rpc.ErrorInfo errors explicitly handled now, resulting informative error message. request_retry() better able detect per-user quota exhausted (vs. per-project quota), resulting informed choice backoff.","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"dependency-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Dependency changes","title":"gargle 1.1.0","text":"cli new Imports. rstudioapi new Imports. rappdirs new Imports. httpuv new Suggests. encourage installation interactive sessions, ’re initiate OAuth flow, unless ’s clear --band auth inevitable. gargle now relies testthat >= 3.0.0 , specifically, uses third edition features. mockr new Suggests, since testthat::use_mock() superseded.","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-100","dir":"Changelog","previous_headings":"","what":"gargle 1.0.0","title":"gargle 1.0.0","text":"CRAN release: 2021-03-03 Better handling BadRequest errors, .e. specifics revealed. oauth_app_from_json now supports JSON files “Web application” client type (#155). request_retry() drop-substitute request_make() uses (modified) exponential backoff retry requests fail error 429 RESOURCE_EXHAUSTED (#63). Credentials used selected client packages rolled. Users bigrquery, googledrive, googlesheets4 can expect prompt re-authorize “Tidyverse API Packages” using OAuth user token. impact users use OAuth app (.e. client ID secret) use service account tokens.","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-050","dir":"Changelog","previous_headings":"","what":"gargle 0.5.0","title":"gargle 0.5.0","text":"CRAN release: 2020-05-06 Troubleshooting gargle auth new vignette. user-facing messaging routes rlang::inform(), (rlang 0.4.2) prints standard output interactive sessions standard error non-interactive sessions (#133). Messaging remains control \"gargle_quiet\" option, defaults TRUE. Gargle2.0 class gains $refresh() method, removes token gargle’s cache refreshed (#79). credentials_service_account() credentials_app_default() gain optional subject argument, can used pass subject claim along httr::oauth_service_token() (#131, @samterfa). request_make() defaults encode = \"json\", differs httr default, aligns better Google APIs (#124). field_mask() utility function constructing Protocol-Buffers-style, JSON-encoded field mask named R list. R6 classes use new documentation capabilities appeared roxygen2 7.0.0. OAuth2 flow can initiated rlang::is_interactive() TRUE. new token needed non-interactive session, gargle now throws error (#113). application default credentials path fixed non-Windows platforms (#115, @acroz). request_develop() can accept parameter appears path body (#123). response_process() explicitly declares UTF-8 encoding content Google API responses tidyverse/googlesheets4#26. response_process() able expose details wider set errors.","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-040","dir":"Changelog","previous_headings":"","what":"gargle 0.4.0","title":"gargle 0.4.0","text":"CRAN release: 2019-10-04 Eliminated uninformative failure OAuth tokens cached R <= 3.5 re-loaded R >= 3.6. change default serialization version (2 vs. 3) creates apparent mismatch token’s hash key. Instead inexplicably failing, now attempt repair cache carry (#109, tidyverse/googledrive#274. non-interactive context, gargle use cached OAuth token, discovers (least) one, even user given explicit instructions. emit recommendation user make intent unambiguous link vignette non-interactive auth (#92). gargle consults option \"httr_oob_default\", option \"gargle_oob_default\" unset. part effort automatically detect need --band auth situations (#102). credentials_service_account() checks explicitly type \"service_account\". makes easier detect common mistake, JSON OAuth client provided instead JSON representing service account (#93). credentials_gce() gains cloud-platform default scope, assuming typical user wants “View manage data across Google Cloud Platform services” (#110, @MarkEdmondson1234).","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-031","dir":"Changelog","previous_headings":"","what":"gargle 0.3.1","title":"gargle 0.3.1","text":"CRAN release: 2019-07-26 Non-interactive auth new vignette serves guide client packages use gargle auth. credentials_gce() might actually work now (#97, @wlongabaugh). credentials_app_default() got small bug fix relating putting token header (r-dbi/bigrquery#336) token_fetch() silently catches warnings, addition errors, falls registry credential-fetching methods (#89). yes/asking ’s OK cache OAuth tokens prints fully now (r-dbi/bigrquery#333).","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-030","dir":"Changelog","previous_headings":"","what":"gargle 0.3.0","title":"gargle 0.3.0","text":"CRAN release: 2019-06-27 unexported functions available generating standardized docs PKG_auth functions client packages updated. token_userinfo(), token_email(), token_tokeninfo() newly exported helpers retrieve information token. AuthState$set_app() AuthState$set_api_key() now allow setting value NULL, .e. fields easier clear. credentials_byo_oauth2() gains ability ingest token object class httr::request, .e. retrieve auth_token component holds object class httr::Token2.0 processed httr::config().","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-020","dir":"Changelog","previous_headings":"","what":"gargle 0.2.0","title":"gargle 0.2.0","text":"CRAN release: 2019-06-11 built-API credentials rotated stored internally way reinforces appropriate use. new Privacy policy well policy authors packages applications. related process get gargle project verified, affects OAuth2 capabilities consent screen. New vignette “get API credentials”, help package authors users obtain API key OAuth client ID secret. credentials_byo_oauth2() new credential function. included default registry consulted token_fetch() tried just credentials_user_oauth2().","code":""},{"path":"https://gargle.r-lib.org/dev/news/index.html","id":"gargle-013","dir":"Changelog","previous_headings":"","what":"gargle 0.1.3","title":"gargle 0.1.3","text":"CRAN release: 2019-06-03 Initial CRAN release","code":""}]
