% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/secret.R
\name{gargle_secret}
\alias{gargle_secret}
\alias{secret_encrypt_json}
\alias{secret_read_json}
\title{Encrypt/decrypt JSON or an R object}
\usage{
secret_encrypt_json(json, path_out = NULL, key)

secret_read_json(path, key)
}
\arguments{
\item{json}{A JSON file (or string).}

\item{path_out}{The path to write the encrypted result to. This is optional,
but anticipated for typical use.}

\item{key}{Encryption key, as implemented by httr2's \href{https://httr2.r-lib.org/reference/secrets.html}{secret functions}. This should
almost certainly be the name of an environment variable whose value was
generated with \code{gargle:::secret_make_key()} (which is an inlined copy of
\code{httr2::secret_make_key()}).}

\item{path}{An encrypted JSON file.}
}
\value{
\itemize{
\item \code{secret_encrypt_json()}: The encrypted JSON string, invisibly. In typical
use, this function is mainly called for its side effect, which is to write an
encrypted file.
\item \code{secret_decrypt_json()}: The decrypted JSON string, invisibly.
}
}
\description{
These functions help to encrypt and decrypt confidential information that you
might need when deploying gargle-using projects or in CI/CD. They basically
rely on inlined copies of the \href{https://httr2.r-lib.org/reference/secrets.html}{secret functions in the httr2 package}. The awkwardness of
inlining code from httr2 can be removed when/if gargle starts to depend on
httr2.
}
\examples{
\dontshow{if (gargle:::secret_has_key("GARGLE_KEY")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# gargle ships with JSON for a fake service account
# we'll put the encrypted JSON into a new file
tmp <- tempfile()
secret_encrypt_json(
  fs::path_package("gargle", "extdata", "fake_service_account.json"),
  tmp,
  key = "GARGLE_KEY"
)

# complete the round trip by providing the decrypted JSON to a credential
# function
credentials_service_account(
 scopes = "https://www.googleapis.com/auth/userinfo.email",
 path = secret_decrypt_json(
   fs::path_package("gargle", "secret", "gargle-testing.json"),
   key = "GARGLE_KEY"
 )
)

file.remove(tmp)
\dontshow{\}) # examplesIf}
}
\keyword{internal}
